/*--------------------------------------------SqlDAL-----------------------------*/

/********************************************************
* Generated By:   zhumc

* Date Generated: 2007Äê10ÔÂ6ÈÕ
* ******************************************************/
using System;
using System.Data;
using System.Data.OracleClient;
using Epower.DevBase.BaseTools;
using Epower.ITSM.Base;
using Epower.DevBase.Organization.SqlDAL;
using Epower.DevBase.Organization.Base;

namespace Epower.ITSM.SqlDAL
{
    /// <summary>
    /// 
    /// </summary>
    public class Equ_PatrolPlanDP
    {
        /// <summary>
        /// 
        /// </summary>
        public Equ_PatrolPlanDP()
        { }

        #region Property
        #region ID
        /// <summary>
        ///
        /// </summary>
        private Decimal mID;
        public Decimal ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion

        #region PlanID
        /// <summary>
        ///
        /// </summary>
        private Decimal mPlanID;
        public Decimal PlanID
        {
            get { return mPlanID; }
            set { mPlanID = value; }
        }
        #endregion

        #region PlanName
        /// <summary>
        ///
        /// </summary>
        private String mPlanName;
        public String PlanName
        {
            get { return mPlanName; }
            set { mPlanName = value; }
        }
        #endregion

        #region EquID
        /// <summary>
        ///
        /// </summary>
        private Decimal mEquID;
        public Decimal EquID
        {
            get { return mEquID; }
            set { mEquID = value; }
        }
        #endregion

        #region EquName
        /// <summary>
        ///
        /// </summary>
        private String mEquName;
        public String EquName
        {
            get { return mEquName; }
            set { mEquName = value; }
        }
        #endregion

        #region ItemID
        /// <summary>
        ///
        /// </summary>
        private Decimal mItemID;
        public Decimal ItemID
        {
            get { return mItemID; }
            set { mItemID = value; }
        }
        #endregion

        #region ItemName
        /// <summary>
        ///
        /// </summary>
        private String mItemName;
        public String ItemName
        {
            get { return mItemName; }
            set { mItemName = value; }
        }
        #endregion

        #region Deleted
        /// <summary>
        ///
        /// </summary>
        private Int32 mDeleted;
        public Int32 Deleted
        {
            get { return mDeleted; }
            set { mDeleted = value; }
        }
        #endregion

        #endregion

        #region GetReCorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        /// <returns>Equ_PatrolPlanDP</returns>
        public Equ_PatrolPlanDP GetReCorded(long lngID)
        {
            Equ_PatrolPlanDP ee = new Equ_PatrolPlanDP();
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT * FROM Equ_PatrolPlan WHERE ID = " + lngID.ToString();
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            foreach (DataRow dr in dt.Rows)
            {
                ee.ID = Decimal.Parse(dr["ID"].ToString());
                ee.PlanID = Decimal.Parse(dr["PlanID"].ToString());
                ee.PlanName = dr["PlanName"].ToString();
                ee.EquID = Decimal.Parse(dr["EquID"].ToString());
                ee.EquName = dr["EquName"].ToString();
                ee.ItemID = Decimal.Parse(dr["ItemID"].ToString());
                ee.ItemName = dr["ItemName"].ToString();
                ee.Deleted = Int32.Parse(dr["Deleted"].ToString());
            }
            return ee;
        }
        #endregion

        #region GetDataTable
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sWhere"></param>
        /// <param name="sOrder"></param>
        /// <returns>DataTable</returns>
        public DataTable GetDataTable(string sWhere, string sOrder)
        {
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT * FROM Equ_PatrolPlan Where 1=1 And Deleted=0 ";
            strSQL += sWhere;
            strSQL += sOrder;
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            return dt;
        }
        #endregion


        #region InsertRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name=pEqu_PatrolPlanDP></param>
        public void InsertRecorded(Equ_PatrolPlanDP pEqu_PatrolPlanDP)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            string strSQL = string.Empty;
            string strID = "0";
            try
            {
                strID = EpowerGlobal.EPGlobal.GetNextID("Equ_PatrolPlanID").ToString();
                pEqu_PatrolPlanDP.ID = decimal.Parse(strID);
                strSQL = @"INSERT INTO Equ_PatrolPlan(
									ID,
									PlanID,
									PlanName,
									EquID,
									EquName,
									ItemID,
									ItemName,
									Deleted
					)
					VALUES( " +
                            strID.ToString() + "," +
                            pEqu_PatrolPlanDP.PlanID.ToString() + "," +
                            StringTool.SqlQ(pEqu_PatrolPlanDP.PlanName) + "," +
                            pEqu_PatrolPlanDP.EquID.ToString() + "," +
                            StringTool.SqlQ(pEqu_PatrolPlanDP.EquName) + "," +
                            pEqu_PatrolPlanDP.ItemID.ToString() + "," +
                            StringTool.SqlQ(pEqu_PatrolPlanDP.ItemName) + "," +
                            pEqu_PatrolPlanDP.Deleted.ToString() +
                    ")";

                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region UpdateRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name=pEqu_PatrolPlanDP></param>
        public void UpdateRecorded(Equ_PatrolPlanDP pEqu_PatrolPlanDP)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            string strSQL = string.Empty;
            try
            {
                strSQL = @"UPDATE Equ_PatrolPlan Set " +
                                                        " PlanID = " + pEqu_PatrolPlanDP.PlanID.ToString() + "," +
                            " PlanName = " + StringTool.SqlQ(pEqu_PatrolPlanDP.PlanName) + "," +
                            " EquID = " + pEqu_PatrolPlanDP.EquID.ToString() + "," +
                            " EquName = " + StringTool.SqlQ(pEqu_PatrolPlanDP.EquName) + "," +
                            " ItemID = " + pEqu_PatrolPlanDP.ItemID.ToString() + "," +
                            " ItemName = " + StringTool.SqlQ(pEqu_PatrolPlanDP.ItemName) + "," +
                            " Deleted = " + pEqu_PatrolPlanDP.Deleted.ToString() +
                                " WHERE ID = " + pEqu_PatrolPlanDP.ID.ToString();

                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region DeleteRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        public void DeleteRecorded(long lngID)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            try
            {
                string strSQL = "Update Equ_PatrolPlan Set Deleted=1  WHERE ID =" + lngID.ToString();
                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion
    }
}

