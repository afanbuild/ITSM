/********************************************************
* Generated By:   zhumc

* Date Generated: 2007年10月5日
* ******************************************************/
using System;
using System.Data;
using System.Data.OracleClient;
using Epower.DevBase.BaseTools;
using Epower.ITSM.Base;
using Epower.DevBase.Organization.SqlDAL;
using Epower.DevBase.Organization.Base;

namespace Epower.ITSM.SqlDAL
{
    /// <summary>
    /// 
    /// </summary>
    public class Equ_PatrolItemDataDP
    {
        /// <summary>
        /// 
        /// </summary>
        public Equ_PatrolItemDataDP()
        { }

        #region Property
        #region ID
        /// <summary>
        ///
        /// </summary>
        private Decimal mID;
        public Decimal ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion

        #region PatrolID
        /// <summary>
        ///
        /// </summary>
        private Decimal mPatrolID;
        public Decimal PatrolID
        {
            get { return mPatrolID; }
            set { mPatrolID = value; }
        }
        #endregion

        #region FlowID
        /// <summary>
        ///
        /// </summary>
        private Decimal mFlowID;
        public Decimal FlowID
        {
            get { return mFlowID; }
            set { mFlowID = value; }
        }
        #endregion

        #region EquID
        /// <summary>
        ///
        /// </summary>
        private Decimal mEquID;
        public Decimal EquID
        {
            get { return mEquID; }
            set { mEquID = value; }
        }
        #endregion

        #region EquName
        /// <summary>
        ///
        /// </summary>
        private String mEquName;
        public String EquName
        {
            get { return mEquName; }
            set { mEquName = value; }
        }
        #endregion

        #region ItemID
        /// <summary>
        ///
        /// </summary>
        private Decimal mItemID;
        public Decimal ItemID
        {
            get { return mItemID; }
            set { mItemID = value; }
        }
        #endregion

        #region ItemName
        /// <summary>
        ///
        /// </summary>
        private String mItemName;
        public String ItemName
        {
            get { return mItemName; }
            set { mItemName = value; }
        }
        #endregion

        #region ItemData
        /// <summary>
        ///
        /// </summary>
        private Int32 mItemData;
        public Int32 ItemData
        {
            get { return mItemData; }
            set { mItemData = value; }
        }
        #endregion

        #region PatrolTime
        /// <summary>
        ///
        /// </summary>
        private DateTime mPatrolTime;
        public DateTime PatrolTime
        {
            get { return mPatrolTime; }
            set { mPatrolTime = value; }
        }
        #endregion

        #region PatrolName
        /// <summary>
        ///
        /// </summary>
        private String mPatrolName;
        public String PatrolName
        {
            get { return mPatrolName; }
            set { mPatrolName = value; }
        }
        #endregion

        #region Remark
        /// <summary>
        ///
        /// </summary>
        private String mRemark;
        public String Remark
        {
            get { return mRemark; }
            set { mRemark = value; }
        }
        #endregion

        #endregion

        #region GetReCorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        /// <returns>Equ_PatrolItemDataDP</returns>
        public Equ_PatrolItemDataDP GetReCorded(long lngID)
        {
            Equ_PatrolItemDataDP ee = new Equ_PatrolItemDataDP();
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT * FROM Equ_PatrolItemData WHERE ID = " + lngID.ToString();
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            foreach (DataRow dr in dt.Rows)
            {
                ee.ID = Decimal.Parse(dr["ID"].ToString());
                ee.PatrolID = Decimal.Parse(dr["PatrolID"].ToString());
                ee.FlowID = Decimal.Parse(dr["FlowID"].ToString());
                ee.EquID = Decimal.Parse(dr["EquID"].ToString());
                ee.EquName = dr["EquName"].ToString();
                ee.ItemID = Decimal.Parse(dr["ItemID"].ToString());
                ee.ItemName = dr["ItemName"].ToString();
                ee.ItemData = Int32.Parse(dr["ItemData"].ToString());
                ee.PatrolTime = DateTime.Parse(dr["PatrolTime"].ToString());
                ee.PatrolName = dr["PatrolName"].ToString();
                ee.Remark = dr["Remark"].ToString();
            }
            return ee;
        }
        #endregion

        #region GetDataTable
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sWhere"></param>
        /// <param name="sOrder"></param>
        /// <returns>DataTable</returns>
        public DataTable GetDataTable(string sWhere, string sOrder)
        {
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT * FROM Equ_PatrolItemData Where 1=1 ";
            strSQL += sWhere;
            strSQL += sOrder;
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            return dt;
        }
        #endregion


        #region InsertRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name=pEqu_PatrolItemDataDP></param>
        public void InsertRecorded(Equ_PatrolItemDataDP pEqu_PatrolItemDataDP)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            string strSQL = string.Empty;
            try
            {
                strSQL = @"INSERT INTO Equ_PatrolItemData(
									PatrolID,
									FlowID,
									EquID,
									EquName,
									ItemID,
									ItemName,
									ItemData,
									PatrolTime,
									PatrolName,
									Remark
					)
					VALUES( " +
                            pEqu_PatrolItemDataDP.PatrolID.ToString() + "," +
                            pEqu_PatrolItemDataDP.FlowID.ToString() + "," +
                            pEqu_PatrolItemDataDP.EquID.ToString() + "," +
                            StringTool.SqlQ(pEqu_PatrolItemDataDP.EquName) + "," +
                            pEqu_PatrolItemDataDP.ItemID.ToString() + "," +
                            StringTool.SqlQ(pEqu_PatrolItemDataDP.ItemName) + "," +
                            pEqu_PatrolItemDataDP.ItemData.ToString() + "," +
                            StringTool.SqlQ(pEqu_PatrolItemDataDP.PatrolTime.ToString()) + "," +
                            StringTool.SqlQ(pEqu_PatrolItemDataDP.PatrolName) + "," +
                            StringTool.SqlQ(pEqu_PatrolItemDataDP.Remark) +
                    ")";

                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region UpdateRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name=pEqu_PatrolItemDataDP></param>
        public void UpdateRecorded(Equ_PatrolItemDataDP pEqu_PatrolItemDataDP)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            string strSQL = string.Empty;
            try
            {
                strSQL = @"UPDATE Equ_PatrolItemData Set " +
                            " PatrolID = " + pEqu_PatrolItemDataDP.PatrolID.ToString() + "," +
                            " FlowID = " + pEqu_PatrolItemDataDP.FlowID.ToString() + "," +
                            " EquID = " + pEqu_PatrolItemDataDP.EquID.ToString() + "," +
                            " EquName = " + StringTool.SqlQ(pEqu_PatrolItemDataDP.EquName) + "," +
                            " ItemID = " + pEqu_PatrolItemDataDP.ItemID.ToString() + "," +
                            " ItemName = " + StringTool.SqlQ(pEqu_PatrolItemDataDP.ItemName) + "," +
                            " ItemData = " + pEqu_PatrolItemDataDP.ItemData.ToString() + "," +
                            " PatrolTime = " + StringTool.SqlQ(pEqu_PatrolItemDataDP.PatrolTime.ToString()) + "," +
                            " PatrolName = " + StringTool.SqlQ(pEqu_PatrolItemDataDP.PatrolName) + "," +
                            " Remark = " + StringTool.SqlQ(pEqu_PatrolItemDataDP.Remark) +
                                " WHERE ID = " + pEqu_PatrolItemDataDP.ID.ToString();

                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region DeleteRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        public void DeleteRecorded(long lngID)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            try
            {
                string strSQL = "delete Equ_PatrolItemData WHERE ID =" + lngID.ToString();
                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region 资产巡检数据
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="pPatrolID"></param>
        public void SavePatrolDetailItem(DataTable dt, decimal pPatrolID)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            if (cn.State != ConnectionState.Open) { cn.Open(); }
            OracleTransaction tran = cn.BeginTransaction();

            DeletePatrolDetailItem(pPatrolID, tran); //先删除再新增

            string strSQL = string.Empty;

            try
            {
                foreach (DataRow dr in dt.Rows)
                {
                    string strID = EpowerGlobal.EPGlobal.GetNextID("Equ_PatrolItemData_SEQUENCE").ToString();

                    strSQL = @" INSERT INTO Equ_PatrolItemData(
                                    ID,
									PatrolID,
									FlowID,
									EquID,
									EquName,
									ItemID,
									ItemName,
									ItemData,
									PatrolTime,
									PatrolName,
									Remark
					)
					VALUES(" + strID + ", " +
                               pPatrolID.ToString() + "," +
                               dr["FlowID"].ToString() + "," +
                               dr["EquID"].ToString() + "," +
                               StringTool.SqlQ(dr["EquName"].ToString()) + "," +
                               dr["ItemID"].ToString() + "," +
                               StringTool.SqlQ(dr["ItemName"].ToString()) + "," +
                               dr["ItemData"].ToString() + "," +
                               "to_date(" + StringTool.SqlQ(dr["PatrolTime"].ToString()) + ",'yyyy-mm-dd   hh24:mi:ss ')," +
                               StringTool.SqlQ(dr["PatrolName"].ToString()) + "," +
                               StringTool.SqlQ(dr["Remark"].ToString()) +
                       ")";
                    OracleDbHelper.ExecuteNonQuery(tran, CommandType.Text, strSQL);
                }
            
                tran.Commit();
            }
            catch (Exception e)
            {
                tran.Rollback();
                throw e;
            }
            finally
            {
                tran.Dispose();
                ConfigTool.CloseConnection(cn);
            }
        }

        /// <summary>
        /// 删除巡检明细记录
        /// </summary>
        /// <param name="pPatrolID"></param>
        /// <param name="tran"></param>
        public static void DeletePatrolDetailItem(decimal pPatrolID, OracleTransaction tran)
        {

            string sSql = "Delete Equ_PatrolItemData Where PatrolID=" + pPatrolID.ToString();
            try
            {
                OracleDbHelper.ExecuteNonQuery(tran, CommandType.Text, sSql);
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// 获得巡检明细
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static DataTable GetPatrolItem(decimal sPatrolID)
        {
            string sSql = @"SELECT * FROM Equ_PatrolItemData WHERE PatrolID = " + sPatrolID.ToString();

            OracleConnection cn = ConfigTool.GetConnection();
            try
            {
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, sSql);
                return dt;
            }
            catch (Exception e)
            {
                throw e;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }

        /// <summary>
        /// 执行计划时自动添加的巡检明细记录
        /// </summary>
        /// <param name="pPatrolID"></param>
        /// <param name="pPlanID"></param>
        public static void AutoPlanAddPatrolDetailItem(decimal pPatrolID, decimal pPlanID)
        {
            string strID = EpowerGlobal.EPGlobal.GetNextID("Equ_PatrolItemData_SEQUENCE").ToString();

            OracleConnection cn = ConfigTool.GetConnection();
            if (cn.State != ConnectionState.Open) { cn.Open(); }

            string sSql = "INSERT INTO Equ_PatrolItemData (ID,patrolid,flowid,equid,equname,itemid,itemname,itemdata,patroltime) " +
                            " SELECT " + strID + "," + pPatrolID.ToString() + " as patrolid,0 as flowid,equid,equname,itemid,itemname,0 as itemdata,sysdate as patroltime " +
                            " FROM Equ_PatrolPlanItem  where planid = " + pPlanID.ToString();
            try
            {
                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, sSql);
            }
            catch (Exception e)
            {
                throw e;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }


        #endregion 
    }
}

