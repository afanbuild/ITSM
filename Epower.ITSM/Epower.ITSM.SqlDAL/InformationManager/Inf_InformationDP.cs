/********************************************************
* Generated By:   zhumc

* Date Generated: 2007年9月19日
* ******************************************************/
using System;
using System.Data;
using System.Xml;
using System.Data.OracleClient;
using Epower.DevBase.BaseTools;
using Epower.ITSM.Base;
using Epower.DevBase.Organization.SqlDAL;
using Epower.DevBase.Organization.Base;
using EpowerGlobal;
using System.IO;
using EpowerCom;
using System.Web;
using System.Text;

namespace Epower.ITSM.SqlDAL
{
    /// <summary>
    /// 
    /// </summary>
    public class Inf_InformationDP
    {
        /// <summary>
        /// 
        /// </summary>
        public Inf_InformationDP()
        { }


        #region 静态方法区

        /// <summary>
        /// 获得知识库附件的信息，以XML串表示
        /// </summary>
        /// <param name="lngKBID"></param>
        /// <returns></returns>
        public static string GetAttachmentXml(decimal lngKBID)
        {
            string strSQL = "";
            OracleDataReader dr;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement xmlElTmp;
            XmlElement xmlElSub;

            xmlElTmp = xmlDoc.CreateElement("Attachments");


            //添加附件信息  
            strSQL = "SELECT a.FileID,a.FileName,a.SufName,a.Status,a.upTime,a.upUserID,b.Name as upUserName ,nvl(a.requstFileId,'') requstFileId " +
                 " FROM Inf_Attachment a,Ts_User b " +
                 " WHERE a.upUserID = b.UserID AND a.Status <>" + (int)e_FileStatus.efsDeleted +
                 "		AND a.KBID =" + lngKBID.ToString() + " AND nvl(a.deleted,0)=" + (int)e_Deleted.eNormal + " ORDER BY a.FileID";

            OracleConnection cn = ConfigTool.GetConnection();

            try
            {
                dr = OracleDbHelper.ExecuteReader(cn, CommandType.Text, strSQL);
                while (dr.Read())
                {
                    xmlElSub = xmlDoc.CreateElement("Attachment");
                    xmlElSub.SetAttribute("FileID", ((long)dr.GetDecimal(0)).ToString());
                    xmlElSub.SetAttribute("FileName", dr.GetString(1));
                    xmlElSub.SetAttribute("SufName", dr.GetString(2));
                    xmlElSub.SetAttribute("Status", dr.GetInt32(3).ToString());
                    xmlElSub.SetAttribute("upTime", dr.GetDateTime(4).ToString());
                    xmlElSub.SetAttribute("upUserID", ((long)dr.GetDecimal(5)).ToString());
                    xmlElSub.SetAttribute("upUserName", dr.GetString(6));
                    xmlElSub.SetAttribute("replace", dr["requstFileId"].ToString());
                    xmlElTmp.AppendChild(xmlElSub);

                }
                dr.Close();                
            }
            finally { ConfigTool.CloseConnection(cn); }


            xmlDoc.AppendChild(xmlElTmp);
            return xmlDoc.InnerXml;
        }
        /// <summary>
        /// 获得知识库附件的信息，以XML串表示
        /// </summary>
        /// <param name="lngKBID"></param>
        /// <returns></returns>
        public static string GetAttachmentXml(decimal lngKBID, ref string strMonthPath)
        {
            string strSQL = "";
            OracleDataReader dr;

            XmlDocument xmlDoc = new XmlDocument();
            XmlElement xmlElTmp;
            XmlElement xmlElSub;

            xmlElTmp = xmlDoc.CreateElement("Attachments");


            //添加附件信息  
            strSQL = "SELECT a.FileID,a.FileName,a.SufName,a.Status,a.upTime,a.upUserID,b.Name as upUserName ,nvl(a.requstFileId,'') requstFileId ,nvl(a.MonthPath,'')  MonthPath" +
                 " FROM Inf_Attachment a,Ts_User b " +
                 " WHERE a.upUserID = b.UserID AND a.Status <>" + (int)e_FileStatus.efsDeleted +
                 "		AND a.KBID =" + lngKBID.ToString() + " AND nvl(a.deleted,0)=" + (int)e_Deleted.eNormal + " ORDER BY a.FileID";

            OracleConnection cn = ConfigTool.GetConnection();

            try
            {
                dr = OracleDbHelper.ExecuteReader(cn, CommandType.Text, strSQL);
                while (dr.Read())
                {
                    strMonthPath = dr["MonthPath"].ToString();

                    xmlElSub = xmlDoc.CreateElement("Attachment");
                    xmlElSub.SetAttribute("FileID", ((long)dr.GetDecimal(0)).ToString());
                    xmlElSub.SetAttribute("FileName", dr.GetString(1));
                    xmlElSub.SetAttribute("SufName", dr.GetString(2));
                    xmlElSub.SetAttribute("Status", dr.GetInt32(3).ToString());
                    xmlElSub.SetAttribute("upTime", dr.GetDateTime(4).ToString());
                    xmlElSub.SetAttribute("upUserID", ((long)dr.GetDecimal(5)).ToString());
                    xmlElSub.SetAttribute("upUserName", dr.GetString(6));
                    xmlElSub.SetAttribute("replace", dr["requstFileId"].ToString());
                    xmlElTmp.AppendChild(xmlElSub);

                }
                dr.Close();
            }
            finally { ConfigTool.CloseConnection(cn); }


            xmlDoc.AppendChild(xmlElTmp);
            return xmlDoc.InnerXml;
        }

        /// <summary>
        /// 更新阅读次数
        /// </summary>
        /// <param name="lngID"></param>
        public static void AddReadCount(decimal lngID)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            try
            {
                string strSQL = "Update Inf_Information Set ReadCount=ReadCount + 1  WHERE ID =" + lngID.ToString();
                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }

        #region 插入阅读记录
        /// <summary>
        /// 插入阅读记录
        /// </summary>
        /// <param name="lngEquID"></param>
        public static void InsRead(decimal lngEquID)
        {
            long lngID = EpowerGlobal.EPGlobal.GetNextID("Inf_ReadID");
            string strSql = "insert into Inf_Read(ID,EquID,ReadTime) values(" + lngID + "," + lngEquID + ",sysdate)";

            CommonDP.ExcuteSql(strSql);
        }
        #endregion

        #region 根据资产ID获取阅读次数
        /// <summary>
        /// 根据资产ID获取阅读次数
        /// </summary>
        /// <param name="lngEquID"></param>
        public static long GetRead(decimal lngEquID)
        {
            string strSql = "select count(1) as Counts from Inf_Read where EquID = " + lngEquID;

            DataTable dt = CommonDP.ExcuteSqlTable(strSql);
            if (dt.Rows.Count > 0)
            {
                return long.Parse(dt.Rows[0]["Counts"].ToString());
            }
            else
            {
                return 0;
            }
        }
        #endregion

        /// <summary>
        /// 更新作用次数
        /// </summary>
        /// <param name="lngID"></param>
        public static void AddDoneCount(decimal lngID)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            try
            {
                string strSQL = "Update Inf_Information Set DoneCount=DoneCount + 1  WHERE ID =" + lngID.ToString();
                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngUserID"></param>
        /// <param name="lngDeptID"></param>
        /// <param name="lngOrgID"></param>
        /// <param name="re"></param>
        /// <param name="sWhere"></param>
        /// <returns></returns>
        public static DataTable GetFieldsTable(long lngUserID, long lngDeptID, long lngOrgID, RightEntity re, string sWhere)
        {
            string strList = string.Empty;
            string strSQL = @"SELECT  a.Title,a.flowid,b.subject,a.PKey,a.TypeName,a.RegTime,
                    b.status,b.endtime,c.nodename,datediff('Minute',sysdate,nvl(b.expectendtime,sysdate)) as FlowDiffMinute" +
                " FROM Inf_KMBase a,es_flow b,es_nodemodel c " +
                " WHERE a.FlowID = b.FlowID AND a.flowmodelid = c.flowmodelid AND a.nodemodelid = c.nodemodelid ";

            if (re == null || re.CanRead == false)
            {
                //查询出空结果
                strSQL += " AND a.flowid = -1 ";
            }
            else
            {
                strSQL += sWhere;
                #region 范围条件
                switch (re.RightRange)
                {
                    case eO_RightRange.eFull:
                        strSQL += "";
                        break;
                    case eO_RightRange.ePersonal:
                        strSQL += "AND exists (SELECT messageid FROM es_message WHERE flowid = b.flowid AND receiverid = " + lngUserID.ToString() + ")";
                        break;
                    case eO_RightRange.eDeptDirect:
                        strSQL += "AND exists (SELECT messageid FROM es_message WHERE flowid = b.flowid AND recdeptid = " + lngDeptID.ToString() + ")";
                        break;
                    case eO_RightRange.eOrgDirect:
                        strSQL += "AND exists (SELECT messageid FROM es_message WHERE flowid = b.flowid AND recorgid = " + lngOrgID.ToString() + ")";
                        break;
                    case eO_RightRange.eDept:
                        strList = DeptDP.GetDeptFullID(lngDeptID);
                        if (strList.Trim().Length > 0)
                        {
                            //不是根部门并有找到
                            strSQL += "AND exists (SELECT messageid FROM es_message WHERE flowid = b.flowid AND recdeptid in (select deptid from ts_dept where fullid like "+StringTool.SqlQ(  strList+ " % ")+"))";
                        }
                        break;
                    case eO_RightRange.eOrg:
                        strList = DeptDP.GetDeptFullID(lngOrgID);
                        if (strList.Trim().Length > 0)
                        {
                            //不是根部门并有找到
                           strSQL += "AND exists (SELECT messageid FROM es_message WHERE flowid = b.flowid AND recorgid in (select distinct deptid from ts_dept where deptkind = 1 and fullid like "+StringTool.SqlQ(  strList+ " % ")+"))";
                        }
                        break;
                    default:
                        strSQL += "";
                        break;
                }
                #endregion

                strSQL = strSQL + " ORDER BY a.KBID DESC";
            }
            OracleConnection cn = ConfigTool.GetConnection();
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            return dt;
        }

        public static DataTable GetFieldsTable(long lngUserID, long lngDeptID, long lngOrgID, RightEntity re, string sWhere, int pagesize, int pageindex, ref int rowcount)
        {
            string strList = string.Empty;
            string strWhere = "1=1";

            if (re == null || re.CanRead == false)
            {
                //查询出空结果
                strWhere += " AND flowid = -1 ";
            }
            else
            {
                #region 范围条件
                switch (re.RightRange)
                {
                    case eO_RightRange.eFull:
                        strWhere += "";
                        break;
                    case eO_RightRange.ePersonal:
                        strWhere += " AND exists (SELECT messageid FROM es_message WHERE flowid = V_Inf_KMBase.flowid AND receiverid = " + lngUserID.ToString() + ")";
                        break;
                    case eO_RightRange.eDeptDirect:
                        strWhere += " AND exists (SELECT messageid FROM es_message WHERE flowid = V_Inf_KMBase.flowid AND recdeptid = " + lngDeptID.ToString() + ")";
                        break;
                    case eO_RightRange.eOrgDirect:
                        strWhere += " AND exists (SELECT messageid FROM es_message WHERE flowid = V_Inf_KMBase.flowid AND recorgid = " + lngOrgID.ToString() + ")";
                        break;
                    case eO_RightRange.eDept:
                        strList = DeptDP.GetDeptFullID(lngDeptID);
                        if (strList.Trim().Length > 0)
                        {
                            //不是根部门并有找到
                            strWhere += " AND exists (SELECT messageid FROM es_message WHERE flowid = V_Inf_KMBase.flowid AND recdeptid in (select deptid from ts_dept where fullid like "+StringTool.SqlQ(  strList+ "%")+"))";
                        }
                        break;
                    case eO_RightRange.eOrg:
                        strList = DeptDP.GetDeptFullID(lngOrgID);
                        if (strList.Trim().Length > 0)
                        {
                            //不是根部门并有找到
                            strWhere += " AND exists (SELECT messageid FROM es_message WHERE flowid = V_Inf_KMBase.flowid AND recorgid in (select distinct deptid from ts_dept where deptkind = 1 and fullid like "+StringTool.SqlQ(  strList+ "%")+"))";
                        }
                        break;
                    default:
                        strWhere += "";
                        break;
                }
                #endregion

                strWhere += sWhere;
            }
            OracleConnection cn = ConfigTool.GetConnection();
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, "V_Inf_KMBase", "*", " ORDER BY KBID DESC", pagesize, pageindex, strWhere, ref rowcount);
            ConfigTool.CloseConnection(cn);
            return dt;
        }

        #endregion

        #region Property
        #region
        /// <summary>
        ///
        /// </summary>
        private Decimal mID;
        public Decimal ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private String mTitle;
        public String Title
        {
            get { return mTitle; }
            set { mTitle = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private String mPKey;
        public String PKey
        {
            get { return mPKey; }
            set { mPKey = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private String mContent;
        public String Content
        {
            get { return mContent; }
            set { mContent = value; }
        }
        #endregion

        #region 无格式的内容

        /// <summary>
        /// 无格式的内容
        /// </summary>
        public String PlainContent
        { get; set; }

        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private Decimal mType;
        public Decimal Type
        {
            get { return mType; }
            set { mType = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private String mTypeName;
        public String TypeName
        {
            get { return mTypeName; }
            set { mTypeName = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private int mDeleted;
        public int Deleted
        {
            get { return mDeleted; }
            set { mDeleted = value; }
        }
        #endregion

        #region 知识来源
        /// <summary>
        /// 知识来源
        /// </summary>
        private eOA_KBSource mKBSource;
        public eOA_KBSource KBSource
        {
            get { return mKBSource; }
            set { mKBSource = value; }
        }
        #endregion

        #region 来源ID
        /// <summary>
        /// 来源编号
        /// </summary>
        private decimal mFromID;
        public decimal FromID
        {
            get { return mFromID; }
            set { mFromID = value; }
        }
        #endregion

        #region 版本号
        /// <summary>
        /// 版本号
        /// </summary>
        private int mKBVersion;
        public int KBVersion
        {
            get { return mKBVersion; }
            set { mKBVersion = value; }
        }
        #endregion

        #region 阅读次数
        /// <summary>
        /// 阅读次数
        /// </summary>
        private decimal mReadCount;
        public decimal ReadCount
        {
            get { return mReadCount; }
            set { mReadCount = value; }
        }
        #endregion

        #region 作用次数
        /// <summary>
        /// 作用次数
        /// </summary>
        private decimal mDoneCount;
        public decimal DoneCount
        {
            get { return mDoneCount; }
            set { mDoneCount = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private Decimal mRegUserID;
        public Decimal RegUserID
        {
            get { return mRegUserID; }
            set { mRegUserID = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private String mRegUserName;
        public String RegUserName
        {
            get { return mRegUserName; }
            set { mRegUserName = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private DateTime mRegTime;
        public DateTime RegTime
        {
            get { return mRegTime; }
            set { mRegTime = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private Decimal mUpdateUserID;
        public Decimal UpdateUserID
        {
            get { return mUpdateUserID; }
            set { mUpdateUserID = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private String mUpdateUserName;
        public String UpdateUserName
        {
            get { return mUpdateUserName; }
            set { mUpdateUserName = value; }
        }
        #endregion

        #region
        /// <summary>
        ///  附件XML串
        /// </summary>
        private String mstrAttach;
        public String AttachXml
        {
            get { return mstrAttach; }
            set { mstrAttach = value; }
        }
        #endregion

        #region
        /// <summary>
        ///
        /// </summary>
        private DateTime mUpdateTime;
        public DateTime UpdateTime
        {
            get { return mUpdateTime; }
            set { mUpdateTime = value; }
        }
        #endregion

        #region mTags
        /// <summary>
        ///
        /// </summary>
        private string mTags;
        public string Tags
        {
            get { return mTags; }
            set { mTags = value; }
        }
        #endregion

        #region ListID
        /// <summary>
        ///
        /// </summary>
        private Decimal mListID;
        public Decimal ListID
        {
            get { return mListID; }
            set { mListID = value; }
        }
        #endregion

        #region ListName
        /// <summary>
        ///
        /// </summary>
        private String mListName;
        public String ListName
        {
            get { return mListName; }
            set { mListName = value; }
        }
        #endregion

        #region EquID
        /// <summary>
        ///
        /// </summary>
        private Decimal mEquID;
        public Decimal EquID
        {
            get { return mEquID; }
            set { mEquID = value; }
        }
        #endregion

        #region EquName
        /// <summary>
        ///
        /// </summary>
        private String mEquName;
        public String EquName
        {
            get { return mEquName; }
            set { mEquName = value; }
        }
        #endregion

        #endregion

        #region GetReCorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        /// <returns>Inf_InformationDP</returns>
        public Inf_InformationDP GetReCorded(long lngID)
        {
            Inf_InformationDP ee = new Inf_InformationDP();
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT * FROM Inf_Information WHERE ID = " + lngID.ToString();
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            foreach (DataRow dr in dt.Rows)
            {
                ee.ID = Decimal.Parse(dr["ID"].ToString());
                ee.Title = dr["Title"].ToString();
                ee.PKey = dr["PKey"].ToString();
                ee.Content = dr["Content"].ToString();
                ee.Type = Decimal.Parse(dr["Type"].ToString());
                ee.TypeName = dr["TypeName"].ToString();
                ee.KBSource = (eOA_KBSource)(int.Parse(dr["KBSource"].ToString()));
                ee.FromID = Decimal.Parse(dr["FromID"].ToString());
                ee.KBVersion = int.Parse(dr["KBVersion"].ToString());
                ee.ReadCount = Decimal.Parse(dr["ReadCount"].ToString());
                ee.DoneCount = Decimal.Parse(dr["DoneCount"].ToString());
                ee.Deleted = int.Parse(dr["Deleted"].ToString());
                ee.RegUserID = Decimal.Parse(dr["RegUserID"].ToString());
                ee.RegUserName = dr["RegUserName"].ToString();
                ee.RegTime = DateTime.Parse(dr["RegTime"].ToString());
                ee.UpdateUserID = Decimal.Parse(dr["UpdateUserID"].ToString());
                ee.UpdateUserName = dr["UpdateUserName"].ToString();
                ee.UpdateTime = DateTime.Parse(dr["UpdateTime"].ToString());
                ee.Tags = dr["Tags"].ToString();

                ee.ListID = Decimal.Parse(dr["ListID"].ToString() == "" ? "0" : dr["ListID"].ToString());
                ee.ListName = dr["ListName"].ToString();
                ee.EquID = Decimal.Parse(dr["EquID"].ToString() == "" ? "0" : dr["EquID"].ToString());
                ee.EquName = dr["EquName"].ToString();

            }

            //获取附件的XML
            //ee.AttachXml = GetAttachmentXml(this.ID);   //控件中读取

            return ee;
        }
        #endregion

        #region GetDataTable
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sWhere"></param>
        /// <param name="sOrder"></param>
        /// <returns>DataTable</returns>
        public DataTable GetDataTable(string sWhere, string sOrder, bool IsSelect)
        {
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT * FROM Inf_Information Where 1=1 And Deleted=0 ";
            strSQL += sWhere;
            //知识分级控制
            if (IsSelect && CommonDP.GetConfigValue("Other", "InformationLimit") != null && CommonDP.GetConfigValue("Other", "InformationLimit") == "1")
            {
                if (System.Web.HttpContext.Current.Session["InformationLimitList"] != null)
                {
                    strSQL = strSQL + " and case Type when 1 then '1' else trim(leading '0' from FullID) end in (" + System.Web.HttpContext.Current.Session["InformationLimitList"].ToString() + ")";
                }
            }
            strSQL += sOrder;
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            return dt;
        }

        public DataTable GetDataTable(string sWhere, string sOrder, bool IsSelect, int pagesize, int pageindex, ref int rowcount)
        {
            string strWhere = "1=1 And Deleted=0 ";
            //知识分级控制
            if (IsSelect && CommonDP.GetConfigValue("Other", "InformationLimit") != null && CommonDP.GetConfigValue("Other", "InformationLimit") == "1")
            {
                if (System.Web.HttpContext.Current.Session["InformationLimitList"] != null)
                {
                    strWhere += " and case Type when 1 then '1' else trim(leading '0' from FullID) end in (" + System.Web.HttpContext.Current.Session["InformationLimitList"].ToString() + ")";
                }
            }
            strWhere += sWhere;

            E8Logger.Debug(strWhere);

            OracleConnection cn = ConfigTool.GetConnection();
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, "Inf_Information", "*", sOrder, pagesize, pageindex, strWhere, ref rowcount);
            ConfigTool.CloseConnection(cn);
            return dt;
        }
        #endregion


        #region InsertRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name=pInf_InformationDP></param>
        public void InsertRecorded(Inf_InformationDP pInf_InformationDP)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            if (cn.State == ConnectionState.Closed)
                cn.Open();
            OracleTransaction tran = cn.BeginTransaction();
            string strSQL = string.Empty;
            string strID = "0";
            try
            {
                //处理关键字
                DealKeyWordTags(tran,pInf_InformationDP.PKey, 0);

                strID = EpowerGlobal.EPGlobal.GetNextID("Inf_InformationID").ToString();
                pInf_InformationDP.ID = decimal.Parse(strID);
                strSQL = @"INSERT INTO Inf_Information(
									ID,
									Title,
									PKey,
									Content,
                                    PlainContent,
                                    Type,
									TypeName,
									FullID,
                                    KBSource,
                                    FromID,
                                    ReadCount,
                                    KBVersion,
                                    DoneCount,
                                    Deleted,
                                    Tags,
									RegUserID,
									RegUserName,
									RegTime,
									UpdateUserID,
									UpdateUserName,
									UpdateTime,
                                    EquID,
                                    EquName,
                                    ListID,
                                    ListName
					)
					VALUES( " +
                            strID.ToString() + "," +
                            StringTool.SqlQ(pInf_InformationDP.Title) + "," +
                            StringTool.SqlQ(pInf_InformationDP.PKey) + "," +
                            ":Content," +
                            ":PlainContent," +
                            pInf_InformationDP.Type.ToString() + "," +
                            StringTool.SqlQ(pInf_InformationDP.TypeName) + "," +
                            StringTool.SqlQ(Inf_SubjectDP.GetSubjectFullID((long)pInf_InformationDP.Type)) + "," +
                            ((int)eOA_KBSource.eNormal).ToString() + "," +
                            "0," +
                            "0," +
                            "0," +
                            "0," +
                            pInf_InformationDP.Deleted.ToString() + "," +
                            StringTool.SqlQ(pInf_InformationDP.Tags) + "," +
                            pInf_InformationDP.RegUserID.ToString() + "," +
                            StringTool.SqlQ(pInf_InformationDP.RegUserName) + "," +
                            "to_date(" + StringTool.SqlQ(pInf_InformationDP.RegTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            pInf_InformationDP.UpdateUserID.ToString() + "," +
                            StringTool.SqlQ(pInf_InformationDP.UpdateUserName) + "," +
                            "to_date(" + StringTool.SqlQ(pInf_InformationDP.UpdateTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            pInf_InformationDP.EquID.ToString() + "," +
                            StringTool.SqlQ(pInf_InformationDP.EquName) + "," +
                            pInf_InformationDP.ListID.ToString() + "," +
                            StringTool.SqlQ(pInf_InformationDP.ListName) + 
                    ")";


                //OracleDbHelper.ExecuteNonQuery(tran, CommandType.Text, strSQL, new OracleParameter[] { new OracleParameter("Content",pInf_InformationDP.Content), new OracleParameter("PlainContent", pInf_InformationDP.PlainContent) });
                OracleCommand cmd = new OracleCommand(strSQL, tran.Connection, tran);
                cmd.Parameters.Add("Content", OracleType.Clob).Value = pInf_InformationDP.Content;
                cmd.Parameters.Add("PlainContent", OracleType.Clob).Value = pInf_InformationDP.PlainContent;
                cmd.ExecuteNonQuery();

                SaveAttachments(tran, pInf_InformationDP.ID, pInf_InformationDP.AttachXml);

                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region UpdateRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name=pInf_InformationDP></param>
        public void UpdateRecorded(Inf_InformationDP pInf_InformationDP)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            if (cn.State == ConnectionState.Closed)
                cn.Open();
            OracleTransaction tran = cn.BeginTransaction();

            string strSQL = string.Empty;
            try
            {
                //处理关键字
                DealKeyWordTags(tran,pInf_InformationDP.PKey, 1);

                strSQL = @"UPDATE Inf_Information Set " +
                                                        " Title = " + StringTool.SqlQ(pInf_InformationDP.Title) + "," +
                            " PKey = " + StringTool.SqlQ(pInf_InformationDP.PKey) + "," +
                            " Content = :Content,"+
                            " PlainContent =:PlainContent, " +
                            " Type = " + pInf_InformationDP.Type.ToString() + "," +
                            " TypeName = " + StringTool.SqlQ(pInf_InformationDP.TypeName) + "," +
                            " FullID = " + StringTool.SqlQ(Inf_SubjectDP.GetSubjectFullID((long)pInf_InformationDP.Type)) + "," +
                            " Deleted = " + pInf_InformationDP.Deleted.ToString() + "," +
                            " Tags = " + StringTool.SqlQ(pInf_InformationDP.Tags) + "," +
                            " KBVersion = KBVersion + 1"  + "," +
                            " RegUserID = " + pInf_InformationDP.RegUserID.ToString() + "," +
                            " RegUserName = " + StringTool.SqlQ(pInf_InformationDP.RegUserName) + "," +
                            " RegTime = to_date(" + StringTool.SqlQ(pInf_InformationDP.RegTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            " UpdateUserID = " + pInf_InformationDP.UpdateUserID.ToString() + "," +
                            " UpdateUserName = " + StringTool.SqlQ(pInf_InformationDP.UpdateUserName) + "," +
                            " UpdateTime = to_date(" + StringTool.SqlQ(pInf_InformationDP.UpdateTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            " ListID = " + pInf_InformationDP.ListID.ToString() + "," +
                            " ListName = " + StringTool.SqlQ(pInf_InformationDP.ListName) + "," +
                            " EquID = " + pInf_InformationDP.EquID.ToString() + "," +
                            " EquName = " + StringTool.SqlQ(pInf_InformationDP.EquName) + 
                                " WHERE ID = " + pInf_InformationDP.ID.ToString();

                //OracleDbHelper.ExecuteNonQuery(tran, CommandType.Text, strSQL);

                OracleCommand cmd = new OracleCommand(strSQL, tran.Connection, tran);
                cmd.Parameters.Add("Content", OracleType.Clob).Value = pInf_InformationDP.Content;
                cmd.Parameters.Add("PlainContent", OracleType.Clob).Value = pInf_InformationDP.PlainContent;
                cmd.ExecuteNonQuery();

                SaveAttachments(tran, pInf_InformationDP.ID, pInf_InformationDP.AttachXml);

                tran.Commit();
            }
            catch
            {
                tran.Rollback();
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region DeleteRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        public void DeleteRecorded(long lngID)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            try
            {
                string strSQL = "Update Inf_Information Set Deleted=1  WHERE ID =" + lngID.ToString();
                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region 处理TAGS
        /// <summary>
        /// 处理TAG
        /// </summary>
        /// <param name="strKey"></param>
        /// <param name="Type"> 0 新增注册关键字, 1 保存情况下补充关键字  3 增加关键字查询次数</param>
        public void DealKeyWordTags(OracleTransaction tran,string strKey,int Type)
        {
            string[] sKey = strKey.Split(",".ToCharArray());

            for(int i=0;i<sKey.Length;i++)
            {
                if (sKey[i] != "")
                {
                    DealKeyWordTag(tran, sKey[i], Type);
                }
            }

            
        }

        /// <summary>
        /// 临时代码
        /// </summary>
        public void DealKeyWordPY()
        {
            OracleConnection cn = ConfigTool.GetConnection();
            string strSQL = "SELECT * FROM inf_tags ";
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);

            try
            {
                foreach (DataRow row in dt.Rows)
                {

                    decimal dGuid = decimal.Parse(row["id"].ToString());
                    string sKeyWord = row["keyword"].ToString();

                    strSQL = "UPDATE inf_tags SET firstpy = " + StringTool.SqlQ(GBToPY.getFirstPY(sKeyWord)) + "," +
                                " py = " + StringTool.SqlQ(GBToPY.getAllPY(sKeyWord)) +
                                " WHERE id =" + dGuid.ToString();
                    OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);

                }
            }
            finally { ConfigTool.CloseConnection(cn); }            

        }

        /// <summary>
        /// 处理关键字信息
        /// </summary>
        /// <param name="strTag"></param>
        /// <param name="Type">0 新增注册关键字, 1 保存情况下补充关键字  3 增加关键字查询次数</param>
        public void DealKeyWordTag(OracleTransaction tran, string strTag, int Type)
        {
            string strSQL = "";
            try
            {
                
                if (Type == 3)
                {
                   
                    strSQL = "Update inf_tags Set QueryCount= QueryCount + 1  WHERE keyword = " + StringTool.SqlQ(strTag);
                    OracleDbHelper.ExecuteNonQuery(tran, CommandType.Text, strSQL);
                }
                else
                {
                    strSQL = "SELECT count(*) FROM inf_tags WHERE keyword = " + StringTool.SqlQ(strTag);

                    int hasKey = 0;
                    Object pobject = OracleDbHelper.ExecuteScalar(tran, CommandType.Text, strSQL);
                    if (pobject != null)
                        hasKey = int.Parse(pobject.ToString());

                    if (hasKey == 0 )
                    {
                        string strnextid = EpowerGlobal.EPGlobal.GetNextID("inf_tagsid").ToString();
                        strSQL = "Insert Into inf_tags (ID,keyword,firstpy,py,Querycount,setcount,regtime) VALUES( " +
                                        strnextid + "," + 
                                        StringTool.SqlQ(strTag) + "," +
                                        StringTool.SqlQ(GBToPY.getFirstPY(strTag)) + "," +
                                        StringTool.SqlQ(GBToPY.getAllPY(strTag)) + "," +
                                       "0," +
                                       "1," +
                                       " sysdate " +
                                   ")";
                        OracleDbHelper.ExecuteNonQuery(tran, CommandType.Text, strSQL);
                    }
                    else
                    {
                        if (Type == 0)
                        {
                            //补充时 不需要 增加
                            strSQL = "Update inf_tags Set SetCount= SetCount + 1  WHERE keyword = " + StringTool.SqlQ(strTag);
                            OracleDbHelper.ExecuteNonQuery(tran, CommandType.Text, strSQL);
                        }
                    }
                }
              

               
            }
            catch
            {
                throw;
            }
            finally
            {
            }
        }

        #region 处理TAGS 没有事物
        /// <summary>
        /// 处理TAG
        /// </summary>
        /// <param name="strKey"></param>
        /// <param name="Type"> 0 新增注册关键字, 1 保存情况下补充关键字  3 增加关键字查询次数</param>
        public void DealKeyWordTags(string strKey, int Type)
        {
            string[] sKey = strKey.Split(",".ToCharArray());

            for (int i = 0; i < sKey.Length; i++)
            {
                if (sKey[i] != "")
                {
                    DealKeyWordTag(sKey[i], Type);
                }
            }


        }

        /// <summary>
        /// 处理关键字信息
        /// </summary>
        /// <param name="strTag"></param>
        /// <param name="Type">0 新增注册关键字, 1 保存情况下补充关键字  3 增加关键字查询次数</param>
        public void DealKeyWordTag(string strTag, int Type)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            string strSQL = "";
            try
            {
                if (Type == 3)
                {

                    strSQL = "Update inf_tags Set QueryCount= QueryCount + 1  WHERE keyword = " + StringTool.SqlQ(strTag);
                    OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
                }
                else
                {
                    strSQL = "SELECT count(*) FROM inf_tags WHERE keyword = " + StringTool.SqlQ(strTag);

                    int hasKey = (int)OracleDbHelper.ExecuteScalar(cn, CommandType.Text, strSQL);

                    if (hasKey == 0)
                    {
                        strSQL = "Insert Into inf_tags (keyword,firstpy,py,Querycount,setcount,regtime) VALUES( " +
                                        StringTool.SqlQ(strTag) + "," +
                                         StringTool.SqlQ(GBToPY.getFirstPY(strTag)) + "," +
                                        StringTool.SqlQ(GBToPY.getAllPY(strTag)) + "," +
                                       "0," +
                                       "1," +
                                       " sysdate " +
                                   ")";
                        OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
                    }
                    else
                    {
                        if (Type == 0)
                        {
                            //补充时 不需要 增加
                            strSQL = "Update inf_tags Set SetCount= SetCount + 1  WHERE keyword = " + StringTool.SqlQ(strTag);
                            OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
                        }
                    }
                }
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }

        #endregion

        #endregion


        #region 保存附件
        /// <summary>
        /// 保存附件信息及存储附件
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngKBID"></param>
        /// <param name="strAttachment"></param>
        /// 
        private void SaveAttachments(OracleTransaction trans, decimal lngKBID, string strAttachment)
        {
            string strSQL = "";
            OracleDataReader dr;
            e_FileStatus lngFileStatus = 0;
            long lngFileID = 0;
            string strFileName = "";
            string strSufName = "";
            long lngupUserID = 0;

            bool blnNew = true;

            string strTmpCatalog = "";
            string strFileCatalog = "";
            string strTmpSubPath = "";
            string strTmpPath = "";

            string strOldFilePath = "";

            string strTmpFileN = "";
            string strFileN = "";
            string reqestId = "";
            int count = 0;

            strTmpCatalog = CommonDP.GetConfigValue("TempCataLog", "TempCataLog");
            strFileCatalog = CommonDP.GetConfigValue("TempCataLog", "FileCataLog");

            XmlTextReader tr = new XmlTextReader(new StringReader(strAttachment));
            while (tr.Read())
            {
                if (tr.NodeType == XmlNodeType.Element && tr.Name == "Attachments")
                {
                    //获取临时子路径
                    if (tr.GetAttribute("TempSubPath") != null)
                        strTmpSubPath = tr.GetAttribute("TempSubPath");

                }
                if (tr.NodeType == XmlNodeType.Element && tr.Name == "Attachment")
                {
                    lngFileStatus = (e_FileStatus)(int.Parse(tr.GetAttribute("Status")));
                    lngFileID = long.Parse(tr.GetAttribute("FileID"));
                    strFileName = tr.GetAttribute("FileName");
                    strSufName = tr.GetAttribute("SufName");
                    lngupUserID = long.Parse(tr.GetAttribute("upUserID"));
                    reqestId = tr.GetAttribute("replace");

                    if (strTmpCatalog.EndsWith(@"\") == false)
                    {
                        if (strTmpSubPath == "")
                        {
                            strTmpPath = strTmpCatalog;
                        }
                        else
                        {
                            strTmpPath = strTmpCatalog + @"\" + strTmpSubPath;
                        }
                    }
                    else
                    {
                        if (strTmpSubPath == "")
                        {
                            strTmpPath = strTmpCatalog.Substring(0, strTmpCatalog.Length - 1);
                        }
                        else
                        {
                            strTmpPath = strTmpCatalog + strTmpSubPath;
                        }

                    }

                    strTmpFileN = strTmpPath + @"\" + lngFileID.ToString();

                    string smonthfilepath = DateTime.Now.ToString("yyyyMM");
                    if (strFileCatalog.EndsWith(@"\") == false)
                    {
                        strFileN = strFileCatalog + @"\" + smonthfilepath;
                    }
                    else
                    {
                        strFileN = strFileCatalog + smonthfilepath;
                    }
                    MyFiles.AutoCreateDirectory(strFileN);
                    strFileN += @"\" + lngFileID.ToString();

                    blnNew = true;
                    switch (lngFileStatus)
                    {
                        case e_FileStatus.efsUpdate:
                        case e_FileStatus.efsNew:
                            //新增处理 ：1、添加记录、更新的情况判断是否存在记录（可能操作的同时别人在进行删除）  2、将临时目录中对应的文件编码并移到文件存储目录下
                            count++;
                            strSQL = "SELECT FileID,nvl(filepath,'') FROM Inf_Attachment WHERE FileID=" + lngFileID.ToString();
                            dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
                            while (dr.Read())
                            {
                                blnNew = false;
                                strOldFilePath = dr.GetString(1);
                            }
                            dr.Close();

                            if (blnNew)
                            {
                                strSQL = "INSERT INTO Inf_Attachment (FileID,KBID,FileName,SufName,filepath,Status,upTime,upUserID,MonthPath,deleted,deleteTime,requstFileId) " +
                                    " VALUES(" +
                                    lngFileID.ToString() + "," +
                                    lngKBID.ToString() + "," +
                                    StringTool.SqlQ(strFileName) + "," +
                                    StringTool.SqlQ(strSufName) + "," +
                                    StringTool.SqlQ(strFileCatalog) + "," +
                                    (int)e_FileStatus.efsNormal + "," +
                                    " sysdate " + "," +
                                    StringTool.SqlQ(lngupUserID.ToString()) + "," +
                                    StringTool.SqlQ(smonthfilepath) + "," +
                                     "0," +
                                     "null," + StringTool.SqlQ(reqestId.ToString()) +
                                    ")";
                            }
                            else
                            {
                                strSQL = "UPDATE Inf_Attachment SET upTime = sysdate,upUserID =" + lngupUserID.ToString() + "," +
                                             " filepath = " + StringTool.SqlQ(strFileCatalog) +
                                            " WHERE FileID=" + lngFileID.ToString();
                            }
                            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                            //2、将临时目录中对应的文件编码并移到文件存储目录下,并删除
                            if (PreProcessForAttachment(strTmpCatalog, strFileCatalog, strTmpFileN))
                            {
                                //由于没有比较好的办法处理，下载时的临时文件，所以，取消编码  2003-06-26 ***
                                //								MyComponent.MyTechLib.MyEnCoder.EnCodeFileToFile(strTmpFileN,strFileN);
                                if (File.Exists(strFileN))
                                    File.Delete(strFileN);
                                File.Move(strTmpFileN, strFileN);
                                //#region guoch 2014-02-25 附件上传时，将上传的附件同时转换一份SWF文件  (现在改用异步服务调用)
                                //Epower.ITSM.SqlDAL.localhost.SWFWebService ws = new Epower.ITSM.SqlDAL.localhost.SWFWebService();
                                //string wsParams = strFileCatalog + smonthfilepath+"\\ " + strFileName + " " + lngFileID;
                                //string Directory = System.AppDomain.CurrentDomain.BaseDirectory.ToString();
                                //Directory += "Lib\\";
                                //ws.CreateSWFCompleted += new Epower.ITSM.SqlDAL.localhost.CreateSWFCompletedEventHandler(ws_CreateSWFCompleted);
                                ////ws.CreateSWFAsync(wsParams, Directory);//调用WebService
                                //ws.CreateSWF(wsParams, Directory);//调用WebService

                                //#endregion
                            }

                            if (strOldFilePath != "" && strOldFilePath.Trim().ToLower() != strFileCatalog.Trim().ToLower())
                            {
                                string strOldFileN = "";
                                if (strFileCatalog.EndsWith(@"\") == false)
                                {
                                    strOldFileN = strOldFilePath + @"\" + lngFileID.ToString();
                                }
                                else
                                {
                                    strOldFileN = strOldFilePath + lngFileID.ToString();
                                }
                                //删除附件
                                if (File.Exists(strOldFileN))
                                    File.Delete(strOldFileN);
                            }


                            break;

                        case e_FileStatus.efsDeleted:
                            strSQL = "SELECT nvl(filepath,'') FROM Inf_Attachment WHERE FileID=" + lngFileID.ToString();
                            dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
                            while (dr.Read())
                            {
                                strOldFilePath = dr.GetString(0);
                            }
                            dr.Close();
                            //删除记录
                            strSQL = "update Inf_Attachment set deleted=1,deletetime=sysdate,requstFileId=" + StringTool.SqlQ(reqestId.ToString()) + " WHERE FileID =" + lngFileID.ToString();
                            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
                            break;
                        default:
                            count++;
                            break;
                    }

                    //无论如何删除临时文件  ***  保险语句  ****
                    if (File.Exists(strTmpFileN))
                        File.Delete(strTmpFileN);

                }
            }
            tr.Close();

            if (strTmpSubPath != "")
            {
                if (Directory.Exists(strTmpPath))
                    Directory.Delete(strTmpPath);
            }
            //if(strSQL!=string.Empty)
            //    OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
            //更新流程附件状态
            if (count == 0)
            {
                strSQL = "UPDATE Inf_Information SET Attachment =" + (int)e_IsTrue.fmFalse + " WHERE ID=" + lngKBID.ToString();
            }
            else
            {
                strSQL = "UPDATE Inf_Information SET Attachment =" + (int)e_IsTrue.fmTrue + " WHERE ID=" + lngKBID.ToString();
            }
            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

            //上传附件完之后 清除添加附件时增加色session 只用一次
            if (HttpContext.Current.Session["tmpsubpath"] != null)
            {
                HttpContext.Current.Session.Remove("tmpsubpath");
            }

        }

        void ws_CreateSWFCompleted(object sender, System.ComponentModel.AsyncCompletedEventArgs e)
        {
            //throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="strKBID"></param>
        /// <returns></returns>
        public static DataTable getDeleteAttchmentTBL(string strKBID)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            try
            {
                string strSQL = @"select OA.KBID as FlowId,OA.*,U.name as UpuserName,OldOA.FileName as oldFiledName from Inf_Attachment OA
                left join ts_user  U on OA.upUserID=U.userid 
                left join Inf_Attachment OldOA  on OA.requstFileId=TO_CHAR(OldOA.FileId)
                where nvl(OA.deleted,0)=1 and (OA.requstFileid='' or OA.requstFileid is null) and OA.KBID=" + strKBID.ToString();
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
                return dt;
            }
            finally
            {
                if (cn.State == ConnectionState.Open)
                {
                    cn.Close();
                }
            }

        }

        public static DataTable getFileIsTrue(long FileId)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            try
            {
                string strSQL = "SELECT * FROM Inf_Attachment where FileID=" + FileId.ToString();
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
                ConfigTool.CloseConnection(cn);
                return dt;
            }
            finally
            {
                if (cn.State == ConnectionState.Open)
                {
                    cn.Close();
                }
            }
        }

        /// <summary>
        /// 跟新过的的附件
        /// </summary>
        /// <param name="lngKBID"></param>
        /// <param name="requstFileid"></param>
        /// <returns></returns>
        public static DataTable getUpdateAttchmentTBL(string lngKBID, long requstFileid, bool IsDelete)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            try
            {

                string strSQL = string.Empty;
                if (IsDelete == false)
                {
                    strSQL = "SELECT a.deleteTime,a.KBID as FlowId,a.FileID,a.FileName,a.SufName,a.Status,a.upTime,a.upUserID,b.Name as upUserName ,nvl(a.requstFileId,'') requstFileId " +
                   " FROM Inf_Attachment a,Ts_User b " +
                   " WHERE a.upUserID = b.UserID " +
                   "		AND a.KBID =" + lngKBID.ToString() + " AND a.requstFileId =" + requstFileid.ToString() + "  ORDER BY a.FileID";
                }
                else
                {
                    strSQL = "SELECT a.deleteTime,a.KBID as FlowId,a.FileID,a.FileName,a.SufName,a.Status,a.upTime,a.upUserID,b.Name as upUserName ,nvl(a.requstFileId,'') requstFileId " +
                     " FROM Inf_Attachment a,Ts_User b " +
                     " WHERE a.upUserID = b.UserID " +
                     "		AND a.KBID =" + lngKBID.ToString() + " AND a.FileID =" + requstFileid.ToString() + "  ORDER BY a.FileID";
                }
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
                ConfigTool.CloseConnection(cn);
                return dt;
            }
            finally
            {
                if (cn.State == ConnectionState.Open)
                {
                    cn.Close();
                }
            }
        }


        private bool PreProcessForAttachment(string strTmpCatalog, string strFileCatalog, string strTmpFileN)
        {
            MyFiles.AutoCreateDirectory(strTmpCatalog);
            MyFiles.AutoCreateDirectory(strFileCatalog);


            FileInfo fi = new FileInfo(strTmpFileN);
            return fi.Exists;

        }

        #endregion

        #region guoch 2014-02-28 新增查询SWF的方法
        /// <summary>
        /// 查询SWF路径
        /// </summary>
        /// <param name="swfID"></param>
        /// <returns></returns>
        public static string GetSWFFile(string swfID)
        {
            string strFile = "";
            string strSQL = "SELECT * FROM INF_SWF WHERE SWFID = " + swfID;
            OracleConnection cn = ConfigTool.GetConnection();
            if (cn.State == ConnectionState.Closed)
            {
                cn.Open();
            }
            try
            {
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
                if (dt.Rows.Count > 0)
                {
                    strFile = "../Flash/" + dt.Rows[0]["MONTHPATH"] + "/" + dt.Rows[0]["SWFID"] + ".swf";
                }
            }
            catch
            {

            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
            return strFile;
        }

        #endregion

        #region 搜索知识 SearchInf
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sWhere"></param>
        /// <param name="sOrder"></param>
        /// <returns>DataTable</returns>
        public DataTable SearchInf(string sWhere, string sOrder)
        {
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT id,Title,PKey,TypeName,Tags Content FROM Inf_Information Where 1=1 And Deleted=0 ";
            strSQL += sWhere;
            //知识分级控制
            if (CommonDP.GetConfigValue("Other", "InformationLimit") != null && CommonDP.GetConfigValue("Other", "InformationLimit") == "1")
            {
                if (System.Web.HttpContext.Current.Session["InformationLimitList"] != null)
                {
                    strSQL = strSQL + " and case Type when 1 then '1' else trim(leading '0' from FullID) end in (" + System.Web.HttpContext.Current.Session["InformationLimitList"].ToString() + ")";
                }
            }
            strSQL += " Order by UpdateTime Desc" + sOrder;
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            return dt;
        }
        #endregion

        #region 取最新知识 GetNewInf
        /// <summary>
        /// 
        /// </summary>
        /// <param name="nNum"></param>
        /// <returns></returns>
        public DataTable GetNewInf(int nNum)
        {
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT id,substr(Title,0,10)||'  ...' Title,PKey,TypeName,Tags FROM Inf_Information Where ROWNUM<=" + nNum.ToString() + " AND 1=1 And Deleted=0 ";
            //知识分级控制
            if (CommonDP.GetConfigValue("Other", "InformationLimit") != null && CommonDP.GetConfigValue("Other", "InformationLimit") == "1")
            {
                if (System.Web.HttpContext.Current.Session["InformationLimitList"] != null)
                {
                    strSQL = strSQL + " and case Type when 1 then '1' else trim(leading '0' from FullID) end in (" + System.Web.HttpContext.Current.Session["InformationLimitList"].ToString() + ")";
                }
            }
            strSQL += " Order by UpdateTime Desc";
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            return dt;
        }
        #endregion

        #region 取附件名称
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngFileID"></param>
        /// <param name="strMonthPath"></param>
        /// <returns></returns>
        public static string GetAttachmentName(long lngFileID, ref string strMonthPath)
        {
            string strFileName = string.Empty;
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();

            try
            {
                strSQL = "SELECT FileName,nvl(MonthPath,'')  MonthPath FROM Inf_Attachment WHERE FileID=" + lngFileID.ToString();
                OracleDataReader dr = OracleDbHelper.ExecuteReader(cn, CommandType.Text, strSQL);
                while (dr.Read())
                {
                    //strFileName = dr.GetString(0);
                    //strMonthPath = dr.GetString(1);
                    strFileName = dr["FileName"].ToString();
                    strMonthPath = dr["MonthPath"].ToString();
                }
                dr.Close();
                
                return strFileName;
            }
            finally { ConfigTool.CloseConnection(cn); }
        }
        #endregion

        #region 取附件原来的路径
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngFileID"></param>
        /// <returns></returns>
        public static string GetDownOldFilePath(long lngFileID)
        {
            string strFileName = string.Empty;
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();

            try
            {
                strSQL = "SELECT nvl(filepath,'') FROM Inf_Attachment WHERE FileID=" + lngFileID.ToString();
                OracleDataReader dr = OracleDbHelper.ExecuteReader(cn, CommandType.Text, strSQL);
                while (dr.Read())
                {
                    strFileName = dr.GetString(0);
                }
                dr.Close();
                
                return strFileName;
            }
            finally { ConfigTool.CloseConnection(cn); }
        }
        #endregion

        #region GetKeyWord
        /// <summary>
        /// 
        /// </summary>
        /// <param name="skeyword"></param>
        /// <returns></returns>
        public DataTable GetKeyWord(string skeyword)
        {
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "select distinct Keyword,QueryCount from Inf_Tags where KeyWord like" + StringTool.SqlQ("%" + skeyword.Trim() + "%") +
                " and KeyWord <>" + StringTool.SqlQ(skeyword) +" Order by QueryCount desc";
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            return dt;
        }
        #endregion

        #region 获取知识相关服务监控图表
        /// <summary>
        /// 获取知识相关服务监控图表
        /// </summary>
        /// <param name="strMastCust"></param>
        /// <returns></returns>
        public static DataTable GetSM(string strMastCust)
        {
            string strWhere = string.Empty;

            if (strMastCust == "")
            {
                strWhere = "";
            }
            else
            {
                strWhere = " and ID = " + StringTool.SqlQ(strMastCust);
            }

            string strSql = @"--总数
                            select '总数' as Title,count(1) as counts,'InfA' as Types
	                             from Inf_Information A
	                            where A.Deleted = 0 
                            union all
                            --当月新增【新增时间为当月】
                            select '当月新增' as Title,count(1) as counts,'InfB' as Types
	                             from Inf_Information A
	                            where A.Deleted = 0 
	                              and to_char(A.RegTime,'yyyy-MM') = to_char(sysdate,'yyyy-MM')	                              
                            union all
                            --当月阅读数【阅读时间为当月】
                            select '当月阅读数'as Title,count(1) as counts,'InfC' as Types
                            from Inf_Information A
                            inner join 
                            (
                            select EquID from Inf_Read
                             where to_char(ReadTime,'yyyy-MM') = to_char(sysdate,'yyyy-MM')                            
                            ) B on A.ID = B.EquID
                            where  A.Deleted = 0 
                            union all
                            --当月评价数【评价时间为当月】
                            select '当月评价数' as Title,count(1) as counts,'InfD' as Types
                              from Inf_Information A
                                inner join 
                                        (
                                select KBID from Inf_BBS where to_char(RegTime,'yyyy-MM') = to_char(sysdate,'yyyy-MM')
                                ) B on A.ID=B.KBID
                             where A.deleted = 0 
                                   and A.ID in (
			                            select KBID from Inf_BBS where to_char(RegTime,'yyyy-MM') = to_char(sysdate,'yyyy-MM')
			                            )"
                                  ;

            DataTable dt = CommonDP.ExcuteSqlTable(strSql);

            return dt;
        }
        #endregion

        #region 知识，柱子点开查看详情
        /// <summary>
        /// 知识，柱子点开查看详情
        /// </summary>
        /// <param name="strMastCust"></param>
        /// <param name="strType"></param>
        /// <param name="pagesize"></param>
        /// <param name="pageindex"></param>
        /// <param name="rowcount"></param>
        /// <returns></returns>
        public static DataTable GetSMDetail(string strMastCust, string strType, int pagesize, int pageindex, ref int rowcount)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            DataTable dt = new DataTable();
            string strWhere = " 1=1 ";
            string strSql = string.Empty;

            if (strMastCust != "")
            {
                //strWhere += " and MastDeptID in (select DeptID from Br_MastCustomer where 1=1 and ID = " + StringTool.SqlQ(strMastCust) + ") ";
            }

            if (strType == "InfA")
            {
                //当月新增
                dt = OracleDbHelper.ExecuteDataTable(cn, "v_InfA", "*", " ORDER BY ID DESC", pagesize, pageindex, strWhere, ref rowcount);
            }
            else if (strType == "InfB")
            {
                //当月变更中
                dt = OracleDbHelper.ExecuteDataTable(cn, "v_InfB", "*", " ORDER BY ID DESC", pagesize, pageindex, strWhere, ref rowcount);
            }
            else if (strType == "InfC")
            {
                //当月已变更
                dt = OracleDbHelper.ExecuteDataTable(cn, "v_InfC", "*", " ORDER BY ID DESC", pagesize, pageindex, strWhere, ref rowcount);
            }
            else if (strType == "InfD")
            {
                //当月发生故障
                dt = OracleDbHelper.ExecuteDataTable(cn, "v_InfD", "*", " ORDER BY ID DESC", pagesize, pageindex, strWhere, ref rowcount);
            }
            else
            {
                strSql = @"--无记录
                                select A.*
                                  from Inf_Information A where 1 = 2";
            }

            return dt;
        }
        #endregion
    }
}

