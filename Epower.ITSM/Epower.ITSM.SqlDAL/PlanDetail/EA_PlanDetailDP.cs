/********************************************************
* Generated By:   zhumc

* Date Generated: 2007Äê10ÔÂ4ÈÕ
* ******************************************************/
using System;
using System.Data;
using System.Data.OracleClient;
using Epower.DevBase.BaseTools;
using Epower.ITSM.Base;
using Epower.DevBase.Organization.SqlDAL;
using Epower.DevBase.Organization.Base;

namespace Epower.ITSM.SqlDAL
{
    /// <summary>
    /// 
    /// </summary>
    public class EA_PlanDetailDP
    {
        /// <summary>
        /// 
        /// </summary>
        public EA_PlanDetailDP()
        { }

        #region Property
        #region ID
        /// <summary>
        ///
        /// </summary>
        private Decimal mID;
        public Decimal ID
        {
            get { return mID; }
            set { mID = value; }
        }
        #endregion

        #region RefType
        /// <summary>
        ///
        /// </summary>
        private Int32 mRefType;
        public Int32 RefType
        {
            get { return mRefType; }
            set { mRefType = value; }
        }
        #endregion

        #region RefID
        /// <summary>
        ///
        /// </summary>
        private Decimal mRefID;
        public Decimal RefID
        {
            get { return mRefID; }
            set { mRefID = value; }
        }
        #endregion

        #region PlanName
        /// <summary>
        ///
        /// </summary>
        private String mPlanName;
        public String PlanName
        {
            get { return mPlanName; }
            set { mPlanName = value; }
        }
        #endregion

        #region PlanDesc
        /// <summary>
        ///
        /// </summary>
        private String mPlanDesc;
        public String PlanDesc
        {
            get { return mPlanDesc; }
            set { mPlanDesc = value; }
        }
        #endregion

        #region PlanXml
        /// <summary>
        ///
        /// </summary>
        private PlanDetailSet mPlanXml;
        public PlanDetailSet PlanXml
        {
            get { return mPlanXml; }
            set { mPlanXml = value; }
        }
        #endregion

        #region LastTime
        /// <summary>
        ///
        /// </summary>
        private DateTime mLastTime = DateTime.MinValue;
        public DateTime LastTime
        {
            get { return mLastTime; }
            set { mLastTime = value; }
        }
        #endregion

        #region NextTime
        /// <summary>
        ///
        /// </summary>
        private DateTime mNextTime = DateTime.MinValue;
        public DateTime NextTime
        {
            get { return mNextTime; }
            set { mNextTime = value; }
        }
        #endregion

        #region RunStatus
        /// <summary>
        ///
        /// </summary>
        private Int32 mRunStatus;
        public Int32 RunStatus
        {
            get { return mRunStatus; }
            set { mRunStatus = value; }
        }
        #endregion

        #region PlanState
        /// <summary>
        ///
        /// </summary>
        private Int32 mPlanState;
        public Int32 PlanState
        {
            get { return mPlanState; }
            set { mPlanState = value; }
        }
        #endregion

        #region PlanDutyUserID
        /// <summary>
        ///
        /// </summary>
        private Decimal mPlanDutyUserID;
        public Decimal PlanDutyUserID
        {
            get { return mPlanDutyUserID; }
            set { mPlanDutyUserID = value; }
        }
        #endregion

        #region PlanDutyUserName
        /// <summary>
        ///
        /// </summary>
        private String mPlanDutyUserName;
        public String PlanDutyUserName
        {
            get { return mPlanDutyUserName; }
            set { mPlanDutyUserName = value; }
        }
        #endregion

        #region PlanExpand
        /// <summary>
        ///
        /// </summary>
        private String mPlanExpand;
        public String PlanExpand
        {
            get { return mPlanExpand; }
            set { mPlanExpand = value; }
        }
        #endregion

        #region RegUserID
        /// <summary>
        ///
        /// </summary>
        private Decimal mRegUserID;
        public Decimal RegUserID
        {
            get { return mRegUserID; }
            set { mRegUserID = value; }
        }
        #endregion

        #region RegUserName
        /// <summary>
        ///
        /// </summary>
        private String mRegUserName;
        public String RegUserName
        {
            get { return mRegUserName; }
            set { mRegUserName = value; }
        }
        #endregion

        #region RegDeptID
        /// <summary>
        ///
        /// </summary>
        private Decimal mRegDeptID;
        public Decimal RegDeptID
        {
            get { return mRegDeptID; }
            set { mRegDeptID = value; }
        }
        #endregion

        #region RegDeptName
        /// <summary>
        ///
        /// </summary>
        private String mRegDeptName;
        public String RegDeptName
        {
            get { return mRegDeptName; }
            set { mRegDeptName = value; }
        }
        #endregion

        #region RegTime
        /// <summary>
        ///
        /// </summary>
        private DateTime mRegTime;
        public DateTime RegTime
        {
            get { return mRegTime; }
            set { mRegTime = value; }
        }
        #endregion

        #region UpdateUserID
        /// <summary>
        ///
        /// </summary>
        private Decimal mUpdateUserID;
        public Decimal UpdateUserID
        {
            get { return mUpdateUserID; }
            set { mUpdateUserID = value; }
        }
        #endregion

        #region UpdateUserName
        /// <summary>
        ///
        /// </summary>
        private String mUpdateUserName;
        public String UpdateUserName
        {
            get { return mUpdateUserName; }
            set { mUpdateUserName = value; }
        }
        #endregion

        #region UpdateTime
        /// <summary>
        ///
        /// </summary>
        private DateTime mUpdateTime;
        public DateTime UpdateTime
        {
            get { return mUpdateTime; }
            set { mUpdateTime = value; }
        }
        #endregion

        #region Deleted
        /// <summary>
        ///
        /// </summary>
        private Int32 mDeleted;
        public Int32 Deleted
        {
            get { return mDeleted; }
            set { mDeleted = value; }
        }
        #endregion
        #endregion

        #region GetReCorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        /// <returns>EA_PlanDetailDP</returns>
        public EA_PlanDetailDP GetReCorded(long lngID)
        {
            EA_PlanDetailDP ee = new EA_PlanDetailDP();
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT * FROM EA_PlanDetail WHERE ID = " + lngID.ToString();
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            foreach (DataRow dr in dt.Rows)
            {
                ee.ID = Decimal.Parse(dr["ID"].ToString());
                ee.RefType = Int32.Parse(dr["RefType"].ToString());
                ee.RefID = Decimal.Parse(dr["RefID"].ToString());
                ee.PlanName = dr["PlanName"].ToString();
                ee.PlanDesc = dr["PlanDesc"].ToString();
                ee.PlanXml = new PlanDetailSet(dr["PlanXml"].ToString());
                if (dr["LastTime"].ToString() != "")
                {
                    ee.LastTime = DateTime.Parse(dr["LastTime"].ToString());
                }
                else
                {
                    ee.LastTime = DateTime.MinValue;
                }
                if (dr["NextTime"].ToString() != "")
                {
                    ee.NextTime = DateTime.Parse(dr["NextTime"].ToString());
                }
                else
                {
                    ee.NextTime = DateTime.MinValue;
                }
                ee.RunStatus = Int32.Parse(dr["RunStatus"].ToString());
                ee.PlanState = Int32.Parse(dr["PlanState"].ToString());
                ee.PlanDutyUserID = Decimal.Parse(dr["PlanDutyUserID"].ToString());
                ee.PlanDutyUserName = dr["PlanDutyUserName"].ToString();
                ee.PlanExpand = dr["PlanExpand"].ToString();
                ee.RegUserID = Decimal.Parse(dr["RegUserID"].ToString());
                ee.RegUserName = dr["RegUserName"].ToString();
                ee.RegDeptID = Decimal.Parse(dr["RegDeptID"].ToString());
                ee.RegDeptName = dr["RegDeptName"].ToString();
                ee.RegTime = DateTime.Parse(dr["RegTime"].ToString());
                ee.UpdateUserID = Decimal.Parse(dr["UpdateUserID"].ToString());
                ee.UpdateUserName = dr["UpdateUserName"].ToString();
                ee.UpdateTime = DateTime.Parse(dr["UpdateTime"].ToString());
                ee.Deleted = Int32.Parse(dr["Deleted"].ToString());
            }
            return ee;
        }
        #endregion

        #region GetDataTable
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sWhere"></param>
        /// <param name="sOrder"></param>
        /// <returns>DataTable</returns>
        public DataTable GetDataTable(string sWhere, string sOrder)
        {
            string strSQL = string.Empty;
            OracleConnection cn = ConfigTool.GetConnection();
            strSQL = "SELECT * FROM EA_PlanDetail Where 1=1 and Deleted=0";
            strSQL += sWhere;
            strSQL += sOrder;
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
            ConfigTool.CloseConnection(cn);
            return dt;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sWhere"></param>
        /// <param name="sOrder"></param>
        /// <param name="pagesize"></param>
        /// <param name="pageindex"></param>
        /// <param name="rowcount"></param>
        /// <returns></returns>
        public DataTable GetDataTable(string sWhere, string sOrder, int pagesize, int pageindex, ref int rowcount)
        {
            string strWhere = "1=1 And Deleted=0" + sWhere;
            OracleConnection cn = ConfigTool.GetConnection();
            DataTable dt = OracleDbHelper.ExecuteDataTable(cn, "EA_PlanDetail", "*", sOrder, pagesize, pageindex, strWhere, ref rowcount);
            ConfigTool.CloseConnection(cn);
            return dt;
        }
        #endregion


        #region InsertRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name=pEA_PlanDetailDP></param>
        public void InsertRecorded(EA_PlanDetailDP pEA_PlanDetailDP)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            string strSQL = string.Empty;
            try
            {
                strSQL = @"INSERT INTO EA_PlanDetail(
									ID,
									RefType,
									RefID,
									PlanName,
                                    PlanDesc,
									PlanXml,
									LastTime,
									NextTime,
									RunStatus,
                                    PlanState,
									PlanDutyUserID,
									PlanDutyUserName,
									PlanExpand,
									RegUserID,
									RegUserName,
									RegDeptID,
									RegDeptName,
									RegTime,
									UpdateUserID,
									UpdateUserName,
									UpdateTime,
                                    Deleted
					)
					VALUES( " +
                            pEA_PlanDetailDP.ID.ToString() + "," +
                            pEA_PlanDetailDP.RefType.ToString() + "," +
                            pEA_PlanDetailDP.RefID.ToString() + "," +
                            StringTool.SqlQ(pEA_PlanDetailDP.PlanName) + "," +
                            StringTool.SqlQ(pEA_PlanDetailDP.PlanDesc) + "," +
                            StringTool.SqlQ(pEA_PlanDetailDP.PlanXml.ToSetString()) + "," +
                            "to_date(" + StringTool.SqlQ(pEA_PlanDetailDP.LastTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            "to_date(" + StringTool.SqlQ(pEA_PlanDetailDP.NextTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            pEA_PlanDetailDP.RunStatus.ToString() + "," +
                            pEA_PlanDetailDP.PlanState.ToString() + "," +
                            pEA_PlanDetailDP.PlanDutyUserID.ToString() + "," +
                            StringTool.SqlQ(pEA_PlanDetailDP.PlanDutyUserName) + "," +
                            StringTool.SqlQ(pEA_PlanDetailDP.PlanExpand) + "," +
                            pEA_PlanDetailDP.RegUserID.ToString() + "," +
                            StringTool.SqlQ(pEA_PlanDetailDP.RegUserName) + "," +
                            pEA_PlanDetailDP.RegDeptID.ToString() + "," +
                            StringTool.SqlQ(pEA_PlanDetailDP.RegDeptName) + "," +
                            "to_date(" + StringTool.SqlQ(pEA_PlanDetailDP.RegTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            pEA_PlanDetailDP.UpdateUserID.ToString() + "," +
                            StringTool.SqlQ(pEA_PlanDetailDP.UpdateUserName) + "," +
                            "to_date(" + StringTool.SqlQ(pEA_PlanDetailDP.UpdateTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            pEA_PlanDetailDP.Deleted.ToString() +
                    ")";

                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region UpdateRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name=pEA_PlanDetailDP></param>
        public void UpdateRecorded(EA_PlanDetailDP pEA_PlanDetailDP)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            string strSQL = string.Empty;
            try
            {
                strSQL = @"UPDATE EA_PlanDetail Set " +
                                                        " RefType = " + pEA_PlanDetailDP.RefType.ToString() + "," +
                            " RefID = " + pEA_PlanDetailDP.RefID.ToString() + "," +
                            " PlanName = " + StringTool.SqlQ(pEA_PlanDetailDP.PlanName) + "," +
                            " PlanDesc = " + StringTool.SqlQ(pEA_PlanDetailDP.PlanDesc) + "," +
                            " PlanXml = " + StringTool.SqlQ(pEA_PlanDetailDP.PlanXml.ToSetString()) + "," +
                            " LastTime = to_date(" + StringTool.SqlQ(pEA_PlanDetailDP.LastTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            " NextTime = to_date(" + StringTool.SqlQ(pEA_PlanDetailDP.NextTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            " RunStatus = " + pEA_PlanDetailDP.RunStatus.ToString() + "," +
                            " PlanState = " + pEA_PlanDetailDP.PlanState.ToString() + "," +
                            " PlanDutyUserID = " + pEA_PlanDetailDP.PlanDutyUserID.ToString() + "," +
                            " PlanDutyUserName = " + StringTool.SqlQ(pEA_PlanDetailDP.PlanDutyUserName) + "," +
                            " PlanExpand = " + StringTool.SqlQ(pEA_PlanDetailDP.PlanExpand) + "," +
                            " UpdateUserID = " + pEA_PlanDetailDP.UpdateUserID.ToString() + "," +
                            " UpdateUserName = " + StringTool.SqlQ(pEA_PlanDetailDP.UpdateUserName) + "," +
                            " UpdateTime = to_date(" + StringTool.SqlQ(pEA_PlanDetailDP.UpdateTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            " Deleted = " + pEA_PlanDetailDP.Deleted.ToString() +
                                " WHERE ID = " + pEA_PlanDetailDP.ID.ToString();

                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region DeleteRecorded
        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        public void DeleteRecorded(long lngID)
        {
            OracleConnection cn = ConfigTool.GetConnection();
            try
            {
                string strSQL = "Update EA_PlanDetail Set Deleted=1 WHERE ID =" + lngID.ToString();
                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion


        #region ¼ÆËãÏÂÒ»´ÎÔËÐÐÊ±¼ä
        /// <summary>
        /// ¸ù¾ÝÅäÖÃÇé¿ö¼°µ±Ç°ÊôÐÔÖµ¼ÆËãÏÂ´ÎÔËÐÐÊ±¼ä
        /// </summary>
        /// <param name="applyChange">ÊÇ·ñÍ¬²½¸üÐÂµ½Êý¾Ý¿â</param>
        public void CalcNextTime(bool applyChange)
        {
            //¼ÆËã Î´×ö
            this.NextTime = CheckServiceSubDo((this.LastTime == DateTime.MinValue ? DateTime.Now : this.LastTime), this.PlanXml);
            if (applyChange == true)
            {
                UpdateNextTime();
            }
        }


        /// <summary>
        /// ¼ÆËãÏÂÒ»´¦ÀíÖ´ÐÐÊ±¼ä
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="sds"></param>
        /// <returns></returns>
        private DateTime CheckServiceSubDo(DateTime dt, PlanDetailSet sds)
        {
            DateTime ret = DateTime.MinValue;
            if (sds.SetType != ePlan_SetType.esst_Day)
            {
                ret = CheckServiceDoDayOne(dt, sds);
            }
            else
            {
                ret = CheckServiceDoDay(dt, sds);
            }
            return ret;
        }

        /// <summary>
        /// ¼ÆËãÃ¿ÈÕÖ´ÐÐÒ»´ÎÇé¿öµÄÏÂ´ÎÔËÐÐÊ±¼ä
        /// </summary>
        /// <param name="sds"></param>
        /// <returns></returns>
        private DateTime CheckServiceDoDayOne(DateTime dt, PlanDetailSet sds)
        {

            DateTime ret = dt.AddDays(1);
            bool conitune = true;

            string[] specTime = sds.SpecfiedTime.Split(":".ToCharArray());
            ret = new DateTime(ret.Year, ret.Month, ret.Day, int.Parse(specTime[0]), int.Parse(specTime[1]), 0);
            int iWeek = (int)ret.DayOfWeek;

            //´ÓµÚ¶þÌìÖ¸¶¨Ê±¼ä¿ªÊ¼¼ÆËã
            while (conitune == true && ret < DateTime.MaxValue.AddYears(-1))
            {
                //¹¹ÔìÖ¸¶¨Ê±¼ä
                iWeek = (int)ret.DayOfWeek;


                //¹¹Ôì¿ªÊ¼Ê±¼ä
                string[] beginTime = sds.BeginTime.Split(":".ToCharArray());
                DateTime begindt = new DateTime(ret.Year, ret.Month, ret.Day, int.Parse(beginTime[0]), int.Parse(beginTime[1]), 0);

                //¹¹Ôì½áÊøÊ±¼ä
                string[] endTime = sds.EndTime.Split(":".ToCharArray());
                DateTime enddt = new DateTime(ret.Year, ret.Month, ret.Day, int.Parse(endTime[0]), int.Parse(endTime[1]), 0);


                if (sds.SetType == ePlan_SetType.esst_Day || sds.SetType == ePlan_SetType.esst_DayOne)
                {
                    conitune = false;
                }

                if (sds.SetType == ePlan_SetType.esst_WeekOne)
                {
                    //ÅÐ¶ÏÈÕÆÚÊÇ·ñÎªµ±ÈÕ(ÐÇÆÚ)
                    if ((int)ret.DayOfWeek == int.Parse(sds.WeekDay))
                    {
                        conitune = false;
                    }

                }
                if (sds.SetType == ePlan_SetType.esst_MonthOne)
                {
                    //ÅÐ¶ÏÈÕÆÚÊÇ·ñÎªµ±ÈÕ(ÔÂ)
                    if (ret.Day == int.Parse(sds.Day))
                    {
                        conitune = false;
                    }
                }
                if (conitune == false)
                {
                    //´óÌõ¼þ·ûºÏµÄÇé¿öÏÂ
                    if (sds.Weeks.IndexOf(iWeek.ToString()) >= 0)
                    {
                        conitune = false;
                    }
                    else
                    {
                        //ÐÇÆÚ²»·ûºÏ ¼ÌÐøÑ­»·
                        conitune = true;
                    }
                    if (conitune == false)
                    {
                        //Èç¹ûÐÇÆÚ·ûºÏµÄÇé¿öÏÂÅÐ¶ÏÊ±¼ä¶Î
                        if (ret >= begindt && ret <= enddt)
                        {
                            conitune = false;
                        }
                        else
                        {
                            //Ö´ÐÐÒ»´ÎµÄÇé¿öÏÂÈç¹ûÊ±¼äµã¶¼¶Ô²»ÉÏ,¾Í ÍË³ö ·µ»Ø  ¿Õ
                            ret = DateTime.MinValue;
                            conitune = false;

                        }
                    }

                }


                if (conitune == true)
                {
                    //¼ÌÐøµÚ¶þÌì
                    ret = ret.AddDays(1);
                }

            }
            return ret;
        }

        /// <summary>
        /// Ö´ÐÐÃ¿ÈÕÖ´ÐÐÇé¿ö¼ì²é
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="sds"></param>
        /// <returns></returns>
        private DateTime CheckServiceDoDay(DateTime dt, PlanDetailSet sds)
        {
            //¼ì²éÖÜÆÚÀà±ð£º¡¡ÐÇÆÚÔòÅÐ¶Ïµ±ÌìÊÇ·ñÖ´ÐÐ¡¡¡¡
            //¼ì²éÊ±¼ä·¶Î§
            //¼ì²é
            //ÅÐ¶ÏÊÇ·ñÔÚÖ¸¶¨Ê±¼ä·¶Î§Æ¯ÒÆ£²Ãë
            //ÅÐ¶ÏÔËÐÐ×´Ì¬
            DateTime ret = dt.AddMilliseconds(sds.Interval);
            //string[] specTime = sds.SpecfiedTime.Split(":".ToCharArray());
            //ret = new DateTime(ret.Year, ret.Month, ret.Day, int.Parse(specTime[0]), int.Parse(specTime[1]), 0);
            int iWeek = (int)ret.DayOfWeek;

            bool conitune = true;


            //´ÓÏÂÒ»¸ö¼ä¸ôÊ±¼ä¿ªÊ¼Ö´ÐÐ

            while (conitune == true && ret < DateTime.MaxValue.AddYears(-1))
            {

                //¹¹ÔìÖ¸¶¨Ê±¼ä
                iWeek = (int)ret.DayOfWeek;


                //¹¹Ôì¿ªÊ¼Ê±¼ä
                string[] beginTime = sds.BeginTime.Split(":".ToCharArray());
                DateTime begindt = new DateTime(ret.Year, ret.Month, ret.Day, int.Parse(beginTime[0]), int.Parse(beginTime[1]), 0);

                //¹¹Ôì½áÊøÊ±¼ä
                string[] endTime = sds.EndTime.Split(":".ToCharArray());
                DateTime enddt = new DateTime(ret.Year, ret.Month, ret.Day, int.Parse(endTime[0]), int.Parse(endTime[1]), 0);



                if (sds.Weeks.IndexOf(iWeek.ToString()) >= 0)
                {
                    conitune = false;
                }
                else
                {
                    //´ÓµÚ¶þÌìµ±Ç°Ê±¼ä¿ªÊ¼
                    ret = ret.AddDays(1);
                    break;
                }
                if (conitune == false)
                {
                    //ÐÇÆÚÂú×ãµÄÇé¿öÏÂÅÐ¶ÏÊ±¼ä·¶Î§
                    if (ret >= begindt && ret <= enddt)
                    {
                        conitune = false;
                    }
                    else
                    {
                        //´ÓµÚ2Ìì¿ªÊ¼Ê±¼ä¿ªÊ¼Ñ­»·
                        conitune = true;
                        ret = new DateTime(ret.AddDays(1).Year, ret.AddDays(1).Month, ret.AddDays(1).Day, begindt.Hour, begindt.Minute, 0);
                    }
                }


                if (conitune == true)
                {
                    //¼ÌÐøÏÂÒ»¸öÊ±¼ä¼ä¸ô
                    ret = ret.AddMilliseconds(sds.Interval);
                }
            }

            return ret;
        }


        #endregion

        #region È¡ÏûÏÂ´ÎÔËÐÐÊ±¼ä
        /// <summary>
        /// 
        /// </summary>
        /// <param name="applyChange">ÊÇ·ñÍ¬²½¸üÐÂµ½Êý¾Ý¿â</param>
        public void CancelNextTime(bool applyChange)
        {
            this.NextTime = DateTime.MinValue;
            if (applyChange == true)
            {
                UpdateNextTime();
            }
        }

        private void UpdateNextTime()
        {
            OracleConnection cn = ConfigTool.GetConnection();
            string strSQL = string.Empty;
            try
            {
                strSQL = @"UPDATE EA_PlanDetail Set " +
                            " NextTime = " + (this.NextTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(this.NextTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')") +
                                " WHERE ID = " + this.ID.ToString();

                OracleDbHelper.ExecuteNonQuery(cn, CommandType.Text, strSQL);
            }
            catch
            {
                throw;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region ¸ù¾ÝÓ¦ÓÃID£¬È¡µÃÁ÷³Ì
        /// <summary>
        /// 
        /// </summary>
        /// <param name="pAppID"></param>
        /// <returns></returns>
        public static DataTable GetFlowByAppID(decimal pAppID)
        {
            string sSql = "SELECT FlowModelID,FlowName FROM ES_FlowModel " +
                        "WHERE Deleted=0 and status=1 AND appid =" + pAppID;
            OracleConnection cn = ConfigTool.GetConnection();
            try
            {
                
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, sSql);

                return dt;
            }
            catch (Exception e)
            {
                throw e;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion

        #region È¡µÃ¼Æ»®Ö´ÐÐÈÕÖ¾
        /// <summary>
        /// 
        /// </summary>
        /// <param name="pPlanID"></param>
        /// <returns></returns>
        public static DataTable GetPlanRunLog(decimal pPlanID)
        {
            string sSql = @"select a.*,b.Name,c.PlanName from EA_PlanHistory a,ts_user b, EA_PlanDetail c where a.UserID=b.UserID and a.ID=c.ID " +
                        " and a.ID =" + pPlanID;
            OracleConnection cn = ConfigTool.GetConnection();
            try
            {
                
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, sSql);

                return dt;
            }
            catch (Exception e)
            {
                throw e;
            }
            finally
            {
                ConfigTool.CloseConnection(cn);
            }
        }
        #endregion 
    }
}

