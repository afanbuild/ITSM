/********************************************************
* Description: 投诉接口开发
* 
* 
* Generated By:   zhumc
* 版权所有:深圳非凡信息技术有限公司
* Date Generated: 2007年7月17日
* ******************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Xml;
using System.IO;
using System.Collections;
using IappDataProcess;
using EpowerGlobal;
using EpowerCom;
using Epower.DevBase.BaseTools;
using Epower.ITSM.SqlDAL;
using System.Data.OracleClient;

namespace appDataProcess.pub
{
    class App_pub_BYTS_DP : IDataProcess
    {
        public App_pub_BYTS_DP()
        { }


        /// <summary>
        /// 返回信息项结果表
        /// </summary>
        /// <param name="lngFlowID"></param>
        /// <param name="lngOpID"></param>
        /// <returns></returns>
        public override DataTable GetFieldsDataTable(long lngFlowID, long lngOpID)
        {
            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            strSQL = "SELECT * FROM CST_BYTS WHERE FlowID =" + lngFlowID.ToString();
            try
            {
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);

                return dt;
            }
            finally { ConfigToolApp.CloseConnection(cn); }
        }

        /// <summary>
        /// 沟通时保存业务数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        /// <param name="lngMessageID"></param>
        public virtual void SaveFieldValuesForCommunic(OracleTransaction trans, long lngID, long lngNodeModelID, long lngFlowModelID, long lngOpID, string strXMlFieldValue, long lngMessageID)
        {
        }

        /// <summary>
        /// 获取业务快照数据（XML）
        /// </summary>
        /// <param name="lngFlowID"></param>
        /// <returns></returns>
        public override string GetBussinessShotValues(long lngFlowID)
        {
            string strRet = string.Empty;

            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            strSQL = "SELECT * FROM CST_BYTS WHERE FlowID =" + lngFlowID.ToString();
            DataTable dt = null;
            try { dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL); }
            finally { ConfigToolApp.CloseConnection(cn); }

            if (dt != null)
            {
                if (dt.Rows.Count > 0)
                {
                    DataRow row = dt.Rows[0];

                    FieldValues fv = new FieldValues();
                    string strTemp = "";

                    fv.Add("投诉人", row["BY_PersonName"].ToString());
                    fv.Add("电话", row["BY_ContactPhone"].ToString());
                    fv.Add("投诉类别", row["BY_TypeName"].ToString());
                    fv.Add("投诉内容", row["BY_Content"].ToString());



                    strRet = fv.GetXmlObject().InnerXml;


                }
            }

            return strRet;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        /// <param name="lngOpID"></param>
        /// <returns></returns>
        public override string GetFieldValues(long lngID, long lngOpID)
        {
            string strRet = string.Empty;

            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            strSQL = "SELECT * FROM CST_BYTS WHERE FlowID =" + lngID.ToString();
            DataTable dt = null;
            try { dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL); }
            finally { ConfigToolApp.CloseConnection(cn); }

            if (dt != null)
            {
                if (dt.Rows.Count > 0)
                {
                    DataRow row = dt.Rows[0];

                    FieldValues fv = new FieldValues();
                    string strTemp = "";

                    if (lngOpID == 0)
                    {
                        //返回知识库
                        strTemp = "投诉:" + row["BY_PersonName"].ToString() + " 总结的知识";
                        fv.Add("Title", strTemp);

                        //关键字
                        strTemp = row["BY_ProjectName"].ToString() + "," + row["BY_SoureName"].ToString()
                            + "," + row["BY_TypeName"].ToString() + "," + row["BY_KindName"].ToString();
                        fv.Add("PKey", strTemp);


                        strTemp = "投诉人:" + row["BY_PersonName"].ToString() + " 投诉人/电话:" + row["BY_PersonName"].ToString() + "  " + row["BY_ContactPhone"].ToString() + "<br>";
                        strTemp = strTemp + "投诉内容:" + row["BY_Content"].ToString() + "<br>";
                        strTemp = strTemp + "措施及结果:" + row["DealContent"].ToString() + "<br>";

                        fv.Add("Content", strTemp);

                        strRet = fv.GetXmlObject().InnerXml;

                    }

                }
            }

            return strRet;
        }

        /// <summary>
        /// 返回信息项结果集
        /// </summary>
        /// <param name="lngFlowID"></param>
        /// <param name="lngOpID"></param>
        /// <returns></returns>
        /// 
        public override DataSet GetFieldsDataSet(long lngFlowID, long lngOpID)
        {
            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            strSQL = "SELECT * FROM CST_BYTS WHERE FlowID =" + lngFlowID.ToString();
            try
            {
                DataSet ds = OracleDbHelper.ExecuteDataset(cn, CommandType.Text, strSQL);
                return ds;
            }
            finally { ConfigToolApp.CloseConnection(cn); }
        }

        /// <summary>
        /// 回收时应用执行的具体实现的接口
        /// 由于回收时需要删除一些内容,所以用户自定义操作会在前段执行
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngMessageID"></param>
        public override void TakeBackUserProcess(OracleTransaction trans, long lngFlowID, long lngMessageID)
        {
        }

        /// <summary>
        /// 退回时应用执行的具体实现的接口
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngMessageID"></param>
        public override void SendBackUserProcess(OracleTransaction trans, long lngFlowID, long lngMessageID)
        {
        }

        /// <summary>
        /// 阅知状态下保存应用中的信息值
        /// </summary>
        /// <param name="lngID"></param>
        /// <param name="lngAppID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        public override void SaveFieldValuesForRead(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngOpID, string strValues, long lngMessageID)
        {
        }

        /// <summary>
        /// 流程发送处理通知接口(在流程发送/新增处理的提交前执行)
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        /// <param name="strReceivers">接收者和消息值列字符串 格式: 接收者ID|消息ID,接收者ID|消息ID,... (仅主办的消息)</param>
        /// <param name="lngMessageID"></param>
        public override void NotifyMessage(OracleTransaction trans, long lngID, long lngNodeModelID, long lngFlowModelID, long lngOpID, string strXMlFieldValue, string strReceivers, long lngMessageID)
        {
        }

        /// <summary>
        /// 保存应用中的信息值
        /// </summary>
        /// <param name="lngID"></param>
        /// <param name="lngAppID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        public override void SaveFieldValues(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngActionID, long lngOpID, string strValues, long lngMessageID)
        {
            BaseSaveFieldValues(trans, lngFlowID, lngNodeModelID, lngFlowModelID, strValues, lngMessageID);
        }
        /// <summary>
        ///  添加和发送流程后用户代码
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="lngMessageID"></param>
        public override void SendFlowFinish(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngOpID, long lngMessageID)
        {
        }

        /// <summary>
        /// 保存业务数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="strValues"></param>
        /// <param name="lngMessageID"></param>
        private void BaseSaveFieldValues(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, string strValues, long lngMessageID)
        {
            #region 保存业务数据
            long lngNextID = 0;
            FieldValues fv = new FieldValues(strValues);
            string strSQL = "SELECT FlowID FROM CST_BYTS WHERE FlowID=" + lngFlowID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            while (dr.Read())
            {
                lngNextID = (long)dr.GetDecimal(0);
                break;
            }
            dr.Close();

            try
            {
                if (lngNextID == 0)
                {
                    #region 新增
                    strSQL = @"INSERT INTO CST_BYTS(
									FlowID,
									NodeModelID,
									FlowModelID,
									BY_PersonName,
									BY_Project,
									BY_ProjectName,
									BY_Soure,
									BY_SoureName,
									BY_Type,
									BY_TypeName,
									BY_ReceiveTime,
									BY_Kind,
									BY_KindName,
									BY_Email,
									BY_Mobile,
									BY_ContactPhone,
									BY_ContactAddress,
									BY_InformNum,
									BY_Content,
                                    DealContent,
									Deleted,
									RegUserID,
									RegUserName,
									RegDeptID,
									RegDeptName,
									RegTime,
                                    CustID,
                                    CustName
						)
						VALUES( " +
                            lngFlowID.ToString() + "," +
                            lngNodeModelID.ToString() + "," +
                            lngFlowModelID.ToString() + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_PersonName").Value) + "," +
                            fv.GetFieldValue("BY_Project").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_ProjectName").Value) + "," +
                            fv.GetFieldValue("BY_Soure").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_SoureName").Value) + "," +
                            fv.GetFieldValue("BY_Type").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_TypeName").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_ReceiveTime").Value) + "," +
                            fv.GetFieldValue("BY_Kind").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_KindName").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_Email").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_Mobile").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_ContactPhone").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_ContactAddress").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_InformNum").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BY_Content").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("DealContent").Value) + "," +
                            fv.GetFieldValue("Deleted").Value + "," +
                            fv.GetFieldValue("RegUserID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("RegUserName").Value) + "," +
                            fv.GetFieldValue("RegDeptID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("RegDeptName").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("RegTime").Value) + "," +
                            fv.GetFieldValue("custid").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("custname").Value) +
                        ")";
                    #endregion
                }
                else
                {
                    #region 更新
                    strSQL = @"UPDATE CST_BYTS Set " +
                            " NodeModelID = " + lngNodeModelID.ToString() + "," +
                                    " BY_PersonName = " + StringTool.SqlQ(fv.GetFieldValue("BY_PersonName").Value) + "," +
                                    " BY_Project = " + fv.GetFieldValue("BY_Project").Value + "," +
                                    " BY_ProjectName = " + StringTool.SqlQ(fv.GetFieldValue("BY_ProjectName").Value) + "," +
                                    " BY_Soure = " + fv.GetFieldValue("BY_Soure").Value + "," +
                                    " BY_SoureName = " + StringTool.SqlQ(fv.GetFieldValue("BY_SoureName").Value) + "," +
                                    " BY_Type = " + fv.GetFieldValue("BY_Type").Value + "," +
                                    " BY_TypeName = " + StringTool.SqlQ(fv.GetFieldValue("BY_TypeName").Value) + "," +
                                    " BY_ReceiveTime = " + StringTool.SqlQ(fv.GetFieldValue("BY_ReceiveTime").Value) + "," +
                                    " BY_Kind = " + fv.GetFieldValue("BY_Kind").Value + "," +
                                    " BY_KindName = " + StringTool.SqlQ(fv.GetFieldValue("BY_KindName").Value) + "," +
                                    " BY_Email = " + StringTool.SqlQ(fv.GetFieldValue("BY_Email").Value) + "," +
                                    " BY_Mobile = " + StringTool.SqlQ(fv.GetFieldValue("BY_Mobile").Value) + "," +
                                    " BY_ContactPhone = " + StringTool.SqlQ(fv.GetFieldValue("BY_ContactPhone").Value) + "," +
                                    " BY_ContactAddress = " + StringTool.SqlQ(fv.GetFieldValue("BY_ContactAddress").Value) + "," +
                                    " BY_InformNum = " + StringTool.SqlQ(fv.GetFieldValue("BY_InformNum").Value) + "," +
                                    " BY_Content = " + StringTool.SqlQ(fv.GetFieldValue("BY_Content").Value) + "," +
                                    " DealContent = " + StringTool.SqlQ(fv.GetFieldValue("DealContent").Value) + "," +
                                    " custid = " + fv.GetFieldValue("custid").Value + "," +
                                    " custname = " + StringTool.SqlQ(fv.GetFieldValue("custname").Value);
                    strSQL += " WHERE FlowID = " + lngNextID.ToString();
                    #endregion
                }
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                //更新关联事件
                if (fv.GetFieldValue("refevent").Value.Trim().ToLower() == "true")
                {
                    DataTable dt = (DataTable)System.Web.HttpContext.Current.Session["RelEventItemData"];
                    System.Text.StringBuilder sql = new System.Text.StringBuilder();
                    sql.Append("Delete From Cst_BytsRel Where FlowID=" + lngFlowID.ToString());
                    foreach (DataRow pdr in dt.Rows)
                    {
                        sql.Append(" Insert Into Cst_BytsRel(FlowID,RelFlowID,subject) Values(");
                        sql.AppendFormat(lngFlowID.ToString() + "," + pdr["FlowID"].ToString() + "," + StringTool.SqlQ(pdr["subject"].ToString()) + ")");
                    }
                    if (!string.IsNullOrEmpty(sql.ToString()))
                    {
                        OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, sql.ToString());
                    }
                }
            }
            catch
            {
                throw;
            }
            #endregion
        }

        /// <summary>
        /// 删除应用相关的信息.
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngOpID"></param>
        public override void DeleteFieldValues(OracleTransaction trans, long lngFlowID, long lngOpID)
        {
            //删除主表
            string strSQL = "DELETE CST_BYTS WHERE flowid =" + lngFlowID.ToString();
            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
        }

        /// <summary>
        /// 统一的归档处理接口
        /// </summary>
        /// <param name="lngID"></param>
        public override void DoFlowEnd(OracleTransaction trans, long lngID)
        {
        }

        /// <summary>
        /// 新增和发送时产生MESSAGE时,用户自定义处理接口
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngMessageID"></param>
        public override void AfterMessageAddedForAddOrSend(OracleTransaction trans, long lngFlowID, long lngNodeID, long lngMessageID, int intActorType, string sFActor)
        {
        }

        /// <summary>
        ///  实现用户自定义二次开发,接收人员 结果
        ///  如:自动分配(根据工作量)
        ///  从表单初提取 等
        /// </summary>
        /// <param name="lngAppID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngNodeID"></param>
        /// <param name="lngMessageID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngUserID"></param>
        /// <param name="strFormXMLValue"></param>
        /// <param name="xmlDoc"></param>
        public override void UserInterfaceReceivers(long lngAppID, long lngOpID, long lngFlowID, long lngNodeID, long lngMessageID, long lngFlowModelID, long lngNodeModelID, long lngUserID, string strFormXMLValue, ref XmlDocument xmlDoc)
        {
        }

        /// <summary>
        /// 判断会签环节是否可以结束
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngMessageID"></param>
        /// <returns></returns>
        public override bool IsInfluxMessageFinished(OracleTransaction trans, long lngMessageID)
        {
            return false;
        }

    }
}
