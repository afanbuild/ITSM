/********************************************************
* Generated By:   zhumc
* 
* Date Generated: 2008年4月4日
* ******************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Xml;
using System.IO;
using System.Collections;
using IappDataProcess;
using EpowerGlobal;
using EpowerCom;
using Epower.DevBase.BaseTools;
using Epower.DevBase.Organization.SqlDAL;
using Epower.ITSM.SqlDAL;
using Epower.ITSM.SqlDAL.ES_TBLCS;
using System.Data.OracleClient;

namespace appDataProcess.pub
{
    class App_pub_Change_DP : IDataProcess
    {
        #region 构造方法

        /// <summary>
        /// 构造方法
        /// </summary>
        public App_pub_Change_DP()
        { }

        #endregion

        #region 返回信息项结果表

        /// <summary>
        /// 返回信息项结果表
        /// </summary>
        /// <param name="lngFlowID"></param>
        /// <param name="lngOpID"></param>
        /// <returns></returns>
        public override DataTable GetFieldsDataTable(long lngFlowID, long lngOpID)
        {
            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            strSQL = "SELECT a.*,b.Email as CustEmail,b.MastCustName,b.job,b.CustDeptName FROM Equ_ChangeService a left join Br_ECustomer b on a.CustID = b.ID WHERE a.FlowID =" + lngFlowID.ToString();
            try
            {
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);
                return dt;
            }
            finally
            {
                ConfigToolApp.CloseConnection(cn);
            }
        }

        #endregion

        #region 沟通时保存业务数据

        /// <summary>
        /// 沟通时保存业务数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        /// <param name="lngMessageID"></param>
        public override void SaveFieldValuesForCommunic(OracleTransaction trans, long lngID, long lngNodeModelID, long lngFlowModelID, long lngOpID, string strXMlFieldValue, long lngMessageID)
        {
        }

        #endregion

        #region 获取业务快照数据

        /// <summary>
        /// 获取业务快照数据（XML）
        /// </summary>
        /// <param name="lngFlowID"></param>
        /// <returns></returns>
        public override string GetBussinessShotValues(long lngFlowID)
        {
            string strRet = string.Empty;

            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            strSQL = "SELECT * FROM Equ_ChangeService WHERE FlowID =" + lngFlowID.ToString();
            DataTable dt = null;
            try { dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL); }
            finally { ConfigToolApp.CloseConnection(cn); }

            if (dt != null)
            {
                if (dt.Rows.Count > 0)
                {
                    DataRow row = dt.Rows[0];

                    FieldValues fv = new FieldValues();
                    string strTemp = "";

                    EA_DefineLanguageDP dl = new EA_DefineLanguageDP();


                    //客户名称
                    fv.Add(dl.GetLanguageValue("LitCustName"), row["CustName"].ToString());
                    //资产名称
                    fv.Add(dl.GetLanguageValue("LitEquDeskName"), row["EquipmentName"].ToString());
                    //请求内容
                    fv.Add(dl.GetLanguageValue("LitChangeReContent"), row["Content"].ToString());
                    //状态
                    fv.Add(dl.GetLanguageValue("litChangeDealStatus"), row["DealStatus"].ToString());



                    strRet = fv.GetXmlObject().InnerXml;


                }
            }

            return strRet;
        }

        #endregion

        #region GetFieldValues

        /// <summary>
        /// GetFieldValues
        /// </summary>
        /// <param name="lngID"></param>
        /// <param name="lngOpID"></param>
        /// <returns></returns>
        public override string GetFieldValues(long lngID, long lngOpID)
        {
            return string.Empty;
        }

        #endregion

        #region 返回信息项结果集

        /// <summary>
        /// 返回信息项结果集
        /// </summary>
        /// <param name="lngFlowID"></param>
        /// <param name="lngOpID"></param>
        /// <returns></returns>
        /// 
        public override DataSet GetFieldsDataSet(long lngFlowID, long lngOpID)
        {
            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            strSQL = "SELECT a.*,b.Email as CustEmail,b.MastCustName,b.job,b.CustDeptName FROM Equ_ChangeService a left join Br_ECustomer b on a.CustID = b.ID WHERE a.FlowID =" + lngFlowID.ToString();
            try
            {
                DataSet ds = OracleDbHelper.ExecuteDataset(cn, CommandType.Text, strSQL);

                return ds;
            }
            finally { ConfigToolApp.CloseConnection(cn); }
        }
        #endregion

        #region 回收时应用执行的具体实现的接口

        /// <summary>
        /// 回收时应用执行的具体实现的接口
        /// 由于回收时需要删除一些内容,所以用户自定义操作会在前段执行
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngMessageID"></param>
        public override void TakeBackUserProcess(OracleTransaction trans, long lngFlowID, long lngMessageID)
        {
            #region 获取信息

            long lngFlowModelID = 0;
            long lngNodeModelID = 0;
            long lngActionID = 0;
            string strSQL = "SELECT a.actionid,b.nodemodelid,c.flowmodelid FROM es_message a,es_node b,es_flow c " +
                            " WHERE a.flowid = c.flowid AND a.nodeid = b.nodeid AND a.messageid = " + lngMessageID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            while (dr.Read())
            {
                lngFlowModelID = (long)dr.GetDecimal(2);
                lngNodeModelID = (long)dr.GetDecimal(1);
                lngActionID = (long)dr.GetInt32(0);
                break;
            }
            dr.Close();

            #endregion

            #region 如果当前为回收状态,回滚历史版本


            //如果当前为回收状态,回滚历史版本
            long lngBusID = MessageDep.GetBusinessActionID(lngFlowModelID, lngNodeModelID, lngActionID);
            if (lngBusID == 10000)
            {
                //当前为回收状态.
                //回滚历史版本
                Equ_DeskDP pEqu_DeskDP = new Equ_DeskDP();
                pEqu_DeskDP = pEqu_DeskDP.GetReCordedForHistory(lngFlowID);

                if (pEqu_DeskDP.ID != 0)
                {
                    //需要判断 回收前是否已经有了其它版本
                    Equ_DeskDP eLast = new Equ_DeskDP();
                    eLast = eLast.GetReCordedForLastHistory((long)pEqu_DeskDP.ID);

                    if (eLast.Version == pEqu_DeskDP.Version)
                    {

                        strSQL = @"UPDATE Equ_Desk Set " +
                                               " Name = " + StringTool.SqlQ(pEqu_DeskDP.Name) + "," +
                                               " Code = " + StringTool.SqlQ(pEqu_DeskDP.Code) + "," +
                                               " Positions = " + StringTool.SqlQ(pEqu_DeskDP.Positions) + "," +
                                               " SerialNumber = " + StringTool.SqlQ(pEqu_DeskDP.SerialNumber) + "," +
                                               " Breed = " + StringTool.SqlQ(pEqu_DeskDP.Breed) + "," +
                                               " Model = " + StringTool.SqlQ(pEqu_DeskDP.Model) + "," +
                                               " Provide = " + pEqu_DeskDP.Provide.ToString() + "," +
                                               " ProvideName = " + StringTool.SqlQ(pEqu_DeskDP.ProvideName) + "," +
                                                "EquStatusID = " + pEqu_DeskDP.EquStatusID.ToString() + "," +
                                               " EquStatusName = " + StringTool.SqlQ(pEqu_DeskDP.EquStatusName) + "," +
                                               " CatalogID = " + pEqu_DeskDP.CatalogID.ToString() + "," +
                                               " CatalogName = " + StringTool.SqlQ(pEqu_DeskDP.CatalogName) + "," +
                                               " FullID = " + StringTool.SqlQ(pEqu_DeskDP.FullID) + "," +
                                               " Deleted = " + pEqu_DeskDP.Deleted.ToString() + "," +
                                               " RegUserID = " + pEqu_DeskDP.RegUserID.ToString() + "," +
                                               " RegUserName = " + StringTool.SqlQ(pEqu_DeskDP.RegUserName) + "," +
                                               " RegDeptID = " + pEqu_DeskDP.RegDeptID.ToString() + "," +
                                               " RegDeptName = " + StringTool.SqlQ(pEqu_DeskDP.RegDeptName) + "," +
                                               " RegTime = " + (pEqu_DeskDP.RegTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.RegTime.ToString()) + ",'yyyy-MM-dd   hh24:mi:ss')") + "," +
                                               " ConfigureInfo = " + StringTool.SqlQ(pEqu_DeskDP.ConfigureInfo) + "," +
                                               " ConfigureValue = " + StringTool.SqlQ(pEqu_DeskDP.ConfigureValue) + "," +
                                               " Costom = " + pEqu_DeskDP.Costom.ToString() + "," +
                                               " Version = " + pEqu_DeskDP.Version.ToString() + "," +
                                               " CostomName = " + StringTool.SqlQ(pEqu_DeskDP.CostomName) + "," +
                                               " ServiceBeginTime = " + (pEqu_DeskDP.ServiceBeginTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.ServiceBeginTime.ToString()) + ",'yyyy-MM-dd   hh24:mi:ss')") + "," +
                                               " ServiceEndTime = " + (pEqu_DeskDP.ServiceEndTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.ServiceEndTime.ToString()) + ",'yyyy-MM-dd   hh24:mi:ss')") + "," +
                                               " ItemCode = " + StringTool.SqlQ(pEqu_DeskDP.ItemCode) + "," +
                                                " UpdateTime = sysdate" +
                                                   " WHERE ID = " + pEqu_DeskDP.ID.ToString();

                        OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                        #region 更新扩展项信息

                        //扩展项对象
                        EQU_deploy ed = new EQU_deploy();

                        //保存扩展项信息
                        foreach (EQU_deploy deploy in pEqu_DeskDP.EquDeploy)
                        {
                            ed.save(trans, deploy);//保存数据
                        }

                        #endregion

                        //删除历史版本信息
                        strSQL = "Delete Equ_DeskHistory WHERE FlowID =" + lngFlowID.ToString();

                        OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                        EQU_deployHistory.Delete(trans, long.Parse(pEqu_DeskDP.ID.ToString()), long.Parse(pEqu_DeskDP.Version.ToString()));
                    }
                    else
                    {
                        throw new Exception("变更记录的资产设备已经应用更新,并且已经存在其它变更信息,不能回收!");
                    }
                }
            }

            #endregion
        }

        #endregion

        #region 退回时应用执行的具体实现的接口

        /// <summary>
        /// 退回时应用执行的具体实现的接口
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngMessageID"></param>
        public override void SendBackUserProcess(OracleTransaction trans, long lngFlowID, long lngMessageID)
        {
            #region 退回资产操作

            long lngPreMessageID = 0;
            long lngFlowModelID = 0;
            long lngNodeModelID = 0;
            long lngActionID = 0;

            string strSQL = "select fmessageid from es_messagefromto where tmessageid = " + lngMessageID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            while (dr.Read())
            {
                lngPreMessageID = (long)dr.GetDecimal(0);
                break;
            }
            dr.Close();

            if (lngPreMessageID != 0)
            {

                strSQL = "SELECT a.actionid,b.nodemodelid,c.flowmodelid FROM es_message a,es_node b,es_flow c " +
                                " WHERE a.flowid = c.flowid AND a.nodeid = b.nodeid AND a.messageid = " + lngPreMessageID.ToString();
                dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
                while (dr.Read())
                {
                    lngFlowModelID = (long)dr.GetDecimal(2);
                    lngNodeModelID = (long)dr.GetDecimal(1);
                    lngActionID = (long)dr.GetInt32(0);
                    break;
                }
                dr.Close();

                //如果当前为回收状态,回滚历史版本
                long lngBusID = MessageDep.GetBusinessActionID(lngFlowModelID, lngNodeModelID, lngActionID);
                if (lngBusID == 10000)
                {
                    //当前为回收状态.
                    //回滚历史版本
                    Equ_DeskDP pEqu_DeskDP = new Equ_DeskDP();
                    pEqu_DeskDP = pEqu_DeskDP.GetReCordedForHistory(lngFlowID);
                    if (pEqu_DeskDP.ID != 0)
                    {
                        //需要判断 退回前是否已经有了其它版本
                        Equ_DeskDP eLast = new Equ_DeskDP();
                        eLast = eLast.GetReCordedForLastHistory((long)pEqu_DeskDP.ID);

                        if (eLast.Version == pEqu_DeskDP.Version)
                        {
                            strSQL = @"UPDATE Equ_Desk Set " +
                                                   " Name = " + StringTool.SqlQ(pEqu_DeskDP.Name) + "," +
                                                   " Code = " + StringTool.SqlQ(pEqu_DeskDP.Code) + "," +
                                                   " Positions = " + StringTool.SqlQ(pEqu_DeskDP.Positions) + "," +
                                                   " SerialNumber = " + StringTool.SqlQ(pEqu_DeskDP.SerialNumber) + "," +
                                                   " Breed = " + StringTool.SqlQ(pEqu_DeskDP.Breed) + "," +
                                                   " Model = " + StringTool.SqlQ(pEqu_DeskDP.Model) + "," +
                                                   " Provide = " + pEqu_DeskDP.Provide.ToString() + "," +
                                                   " ProvideName = " + StringTool.SqlQ(pEqu_DeskDP.ProvideName) + "," +
                                                    "EquStatusID = " + pEqu_DeskDP.EquStatusID.ToString() + "," +
                                                   " EquStatusName = " + StringTool.SqlQ(pEqu_DeskDP.EquStatusName) + "," +
                                                   " CatalogID = " + pEqu_DeskDP.CatalogID.ToString() + "," +
                                                   " CatalogName = " + StringTool.SqlQ(pEqu_DeskDP.CatalogName) + "," +
                                                   " FullID = " + StringTool.SqlQ(pEqu_DeskDP.FullID) + "," +
                                                   " Deleted = " + pEqu_DeskDP.Deleted.ToString() + "," +
                                                   " RegUserID = " + pEqu_DeskDP.RegUserID.ToString() + "," +
                                                   " RegUserName = " + StringTool.SqlQ(pEqu_DeskDP.RegUserName) + "," +
                                                   " RegDeptID = " + pEqu_DeskDP.RegDeptID.ToString() + "," +
                                                   " RegDeptName = " + StringTool.SqlQ(pEqu_DeskDP.RegDeptName) + "," +
                                                   " RegTime = " + (pEqu_DeskDP.RegTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.RegTime.ToString()) + ",'yyyy-MM-dd   hh24:mi:ss')") + "," +
                                                   " ConfigureInfo = " + StringTool.SqlQ(pEqu_DeskDP.ConfigureInfo) + "," +
                                                   " ConfigureValue = " + StringTool.SqlQ(pEqu_DeskDP.ConfigureValue) + "," +
                                                   " Costom = " + pEqu_DeskDP.Costom.ToString() + "," +
                                                   " Version = " + pEqu_DeskDP.Version.ToString() + "," +
                                                   " CostomName = " + StringTool.SqlQ(pEqu_DeskDP.CostomName) + "," +
                                                   " ServiceBeginTime = " + (pEqu_DeskDP.ServiceBeginTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.ServiceBeginTime.ToString()) + ",'yyyy-MM-dd   hh24:mi:ss')") + "," +
                                                   " ServiceEndTime = " + (pEqu_DeskDP.ServiceEndTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.ServiceEndTime.ToString()) + ",'yyyy-MM-dd   hh24:mi:ss')") + "," +
                                                   " ItemCode = " + StringTool.SqlQ(pEqu_DeskDP.ItemCode) + "," +
                                                   " UpdateTime = sysdate" +
                                                       " WHERE ID = " + pEqu_DeskDP.ID.ToString();

                            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                            #region 更新扩展项信息

                            //扩展项对象
                            EQU_deploy ed = new EQU_deploy();

                            //保存扩展项信息
                            foreach (EQU_deploy deploy in pEqu_DeskDP.EquDeploy)
                            {
                                ed.save(trans, deploy);//保存数据
                            }

                            #endregion

                            //删除历史版本信息
                            strSQL = "Delete Equ_DeskHistory WHERE FlowID =" + lngFlowID.ToString();

                            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                            EQU_deployHistory.Delete(trans, long.Parse(pEqu_DeskDP.ID.ToString()), long.Parse(pEqu_DeskDP.Version.ToString()));
                        }
                        else
                        {
                            throw new Exception("变更记录的资产设备已经应用更新,并且已经存在其它变更信息,不能回收!");
                        }
                    }
                }

            }

            #endregion
        }

        #endregion

        #region 阅知状态下保存应用中的信息值

        /// <summary>
        /// 阅知状态下保存应用中的信息值
        /// </summary>
        /// <param name="lngID"></param>
        /// <param name="lngAppID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        public override void SaveFieldValuesForRead(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngOpID, string strValues, long lngMessageID)
        {
        }

        #endregion

        #region 流程发送处理通知接口

        /// <summary>
        /// 流程发送处理通知接口(在流程发送/新增处理的提交前执行)
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        /// <param name="strReceivers">接收者和消息值列字符串 格式: 接收者ID|消息ID,接收者ID|消息ID,... (仅主办的消息)</param>
        /// <param name="lngMessageID"></param>
        public override void NotifyMessage(OracleTransaction trans, long lngID, long lngNodeModelID, long lngFlowModelID, long lngOpID, string strXMlFieldValue, string strReceivers, long lngMessageID)
        {
            FieldValues fv = new FieldValues(strXMlFieldValue);

            #region 机构环节时获取接收人员列表


            if (strReceivers == "")
            {
                string strSQL = "SELECT RECEIVEID,MESSAGEID FROM ES_RECEIVELIST WHERE MessageID IN (SELECT TMessageID FROM ES_MESSAGEFROMTO WHERE FMESSAGEID=" + lngMessageID.ToString() + ")";
                DataTable dt = OracleDbHelper.ExecuteDataset(trans, CommandType.Text, strSQL).Tables[0];
                foreach (DataRow row in dt.Rows)
                {
                    strReceivers = strReceivers + row["RECEIVEID"].ToString() + "|" + row["MESSAGEID"].ToString() + ",";
                }
                if (strReceivers != "")
                    strReceivers = strReceivers.Substring(0, strReceivers.Length - 1);
            }
            #endregion

            #region 发送邮件


            if (fv.GetFieldValue("EmailNotify") != null)
            {
                //通知处理人的情况下


                if (fv.GetFieldValue("EmailNotify").Value.Trim().ToLower() == "true")
                {
                    MailSendDeal.SendEmailPublicV2(trans, lngID, strReceivers, fv, lngFlowModelID, 0, lngMessageID);
                }
            }
            #endregion

            #region 发送短信


            //短信发送


            //if (fv.GetFieldValue("SMSNotify") != null && fv.GetFieldValue("SMSNotify").Value.Trim().ToLower() == "true")
            //{
            //    SMSSendDeal.SendMessagePublic(trans, lngID, strReceivers, fv, lngFlowModelID);
            //}
            #endregion
        }

        #endregion

        #region 保存应用中的信息值

        /// <summary>
        /// 保存应用中的信息值
        /// </summary>
        /// <param name="lngID"></param>
        /// <param name="lngAppID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        public override void SaveFieldValues(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngActionID, long lngOpID, string strValues, long lngMessageID)
        {

            #region 变量初始化

            FieldValues fv = new FieldValues(strValues);
            long lngNextID = 0;//变更ID
            long lngAutoEquID = 0;  //自动保存过的资产ID
            long lngEquipmentID = 0;  //当前设备ID,需要 做请求状态的控制
            long lngFormEquID = 0;   //表单上的资产ID
            string strUrl = fv.GetFieldValue("DeskChange").Value;//变更临时存放位置
            long lngBusID = MessageDep.GetBusinessActionID(lngFlowModelID, lngNodeModelID, lngActionID); //业务动作ID 对应 事件状态ID
            //string lngBusName = FlowDP.getBuidName(lngBusID);  //业务动作名称 对应 事件状态名称
            #endregion

            #region 根据不同业务动作绑定对应的变更状态

            string DealStatusID = fv.GetFieldValue("DealStatusID").Value;
            string DealStatus = fv.GetFieldValue("DealStatus").Value;

            string strBusName = "";

            if (lngBusID > 0)
            {
                if (lngBusID == 6481)
                    strBusName = "已登记";
                else if (lngBusID == 10000)
                    strBusName = "结束";
                else
                    strBusName = FlowDP.getBuidName(lngBusID);

                //根据变更状态名称 查找对应的ID
                string strCatalogID = CatalogDP.GetCatalogIDbyName(strBusName, 1022);

                DealStatusID = strCatalogID;
                DealStatus = strBusName;

            }
            #endregion

            #region 查询是添加还是更新

            string strSQL = "SELECT ID,AutoEquID,EquipmentID FROM Equ_ChangeService WHERE FlowID=" + lngFlowID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            while (dr.Read())
            {
                lngNextID = (long)dr.GetDecimal(0);
                if (dr.IsDBNull(1) == false)
                    lngAutoEquID = (long)dr.GetDecimal(1);
                lngEquipmentID = (long)dr.GetDecimal(2);
                break;
            }
            dr.Close();

            lngFormEquID = long.Parse(fv.GetFieldValue("EquipmentID").Value);

            #endregion

            #region 保存变更单信息

            try
            {

                #region 保存变更单数据


                if (lngNextID == 0)
                {
                    #region 新增

                    lngNextID = EPGlobal.GetNextID("Equ_ChangeServiceID");
                    strSQL = @"INSERT INTO Equ_ChangeService(
									ID,
									FlowID,
									NodeModelID,
									FlowModelID,
                                    ChangeTypeID,
                                    ChangeTypeName,
                                    EffectID,
									EffectName,
                                    InstancyID,
									InstancyName,
                                    LevelID,
                                    LevelName,
									ChangeNo,
									Subject,
									ChangeTime,
									Content,
									Reason,
									CustID,
									Custname,
									CustAddress,
									Contact,
									Ctel,
									EquipmentID,
									EquipmentName,
									ChangeAnalyses,
									ChangeAnalysesResult,
									Remark,
                                    DealStatusID,
									DealStatus,
									RegUserID,
									RegUserName,
									RegDeptID,
									RegDeptName,
                                    RegOrgID,
                                    IssuesFlowID,
                                    ProblemFlowID,									

                                    IS_PLAN_CHANGE ,
                                    ChangeNeedPeopleID ,
                                    ChangeNeedPeople ,
                                    Isplan,
                                    CHANGE_PLACE_ID,
                                    CHANGE_PLACE_NAME ,
                                    BUS_EFFECT ,
                                    DATA_EFFECT ,
                                    PLAN_BEGIN_TIME ,
                                    PLAN_END_TIME ,
                                    IS_BUS_EFFECT ,
                                    IS_DATA_EFFECT ,
                                    CHANGE_WINDOW_ID ,
                                    CHANGE_WINDOW_NAME ,
                                    CHANGE_WINDOW_REMARK ,
                                    IS_STOP_SERVER ,
                                    STOP_SERVER_REMARK ,
                                    REAL_BEGIN_TIME,
                                    REAL_END_TIME,

                                    RegTime
						)
						VALUES( " +
                            lngNextID.ToString() + "," +
                            lngFlowID.ToString() + "," +
                            lngNodeModelID.ToString() + "," +
                            lngFlowModelID.ToString() + "," +
                             fv.GetFieldValue("ChangeTypeID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("ChangeTypeName").Value) + "," +
                            fv.GetFieldValue("EffectID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EffectName").Value) + "," +
                            fv.GetFieldValue("InstancyID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("InstancyName").Value) + "," +
                            fv.GetFieldValue("LevelID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("LevelName").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("ChangeNo").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Subject").Value) + "," +
                            "to_date(" + StringTool.SqlQ(Convert.ToDateTime(fv.GetFieldValue("ChangeTime").Value).ToString("yyyy-MM-dd HH:mm:ss")) + ",'yyyy-MM-dd HH24:mi:ss')," +
                            StringTool.SqlQ(fv.GetFieldValue("Content").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Reason").Value) + "," +
                            fv.GetFieldValue("CustID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Custname").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("CustAddress").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Contact").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Ctel").Value) + "," +
                            fv.GetFieldValue("EquipmentID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EquipmentName").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("ChangeAnalyses").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("ChangeAnalysesResult").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Remark").Value) + "," +
                            fv.GetFieldValue("DealStatusID").Value.ToString() + "," +
                            StringTool.SqlQ(fv.GetFieldValue("DealStatus").Value) + "," +
                            fv.GetFieldValue("RegUserID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("RegUserName").Value) + "," +
                            fv.GetFieldValue("RegDeptID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("RegDeptName").Value) + "," +
                            fv.GetFieldValue("RegOrgID").Value + "," +
                            fv.GetFieldValue("FromFlowID").Value.Trim() + "," +
                            fv.GetFieldValue("FromProblemFlowID").Value.Trim() + "," +

                            fv.GetFieldValue("IS_PLAN_CHANGE").Value + "," +
                             fv.GetFieldValue("ChangeNeedPeopleID").Value.ToString() + "," +
                             StringTool.SqlQ(fv.GetFieldValue("ChangeNeedPeople").Value) + "," +
                             StringTool.SqlQ(fv.GetFieldValue("Isplan").Value) + "," +
                             StringTool.SqlQ(fv.GetFieldValue("CHANGE_PLACE_ID").Value.ToString()) + "," +
                              StringTool.SqlQ(fv.GetFieldValue("CHANGE_PLACE_NAME").Value) + "," +
                              StringTool.SqlQ(fv.GetFieldValue("BUS_EFFECT").Value) + "," +
                              StringTool.SqlQ(fv.GetFieldValue("DATA_EFFECT").Value) + "," +
                              (fv.GetFieldValue("PLAN_BEGIN_TIME").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("PLAN_BEGIN_TIME").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            (fv.GetFieldValue("PLAN_END_TIME").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("PLAN_END_TIME").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                             fv.GetFieldValue("IS_BUS_EFFECT").Value.ToString() + "," +
                             fv.GetFieldValue("IS_DATA_EFFECT").Value.ToString() + "," +
                             fv.GetFieldValue("CHANGE_WINDOW_ID").Value.ToString() + "," +
                              StringTool.SqlQ(fv.GetFieldValue("CHANGE_WINDOW_NAME").Value) + "," +
                              StringTool.SqlQ(fv.GetFieldValue("CHANGE_WINDOW_REMARK").Value) + "," +
                             fv.GetFieldValue("IS_STOP_SERVER").Value.ToString() + "," +
                              StringTool.SqlQ(fv.GetFieldValue("STOP_SERVER_REMARK").Value) + "," +
                            (fv.GetFieldValue("REAL_BEGIN_TIME").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("REAL_BEGIN_TIME").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            (fv.GetFieldValue("REAL_END_TIME").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("REAL_END_TIME").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +

                            "to_date(" + StringTool.SqlQ(Convert.ToDateTime(fv.GetFieldValue("RegTime").Value).ToString("yyyy-MM-dd HH:mm:ss")) + ",'yyyy-MM-dd HH24:mi:ss')" +
                        ")";
                    decimal dFromFlowID = decimal.Parse(fv.GetFieldValue("FromFlowID").Value.Trim());
                    if (dFromFlowID != 0)
                    {
                        string ssql = "UPDATE Cst_Issues Set " +
                            " AssociateFlowID = " + lngFlowID.ToString();
                        ssql += " WHERE FlowID = " + dFromFlowID.ToString();
                        OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, ssql);
                    }

                    #region 将此变更单FlowID信息更新到问题单
                    decimal dFromProblemFlowID = decimal.Parse(fv.GetFieldValue("FromProblemFlowID").Value.Trim());
                    if (dFromProblemFlowID != 0)
                    {
                        string ssql_Pro = "UPDATE Pro_ProblemDeal Set " +
                            " AssociateFlowID = " + lngFlowID.ToString();
                        ssql_Pro += " WHERE FlowID = " + dFromProblemFlowID.ToString();
                        OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, ssql_Pro);
                    }
                    #endregion

                    OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
                    #endregion
                }
                else
                {

                    #region 保存过,判断资产ID,不能再变化,有变化抛出错误信息


                    if (lngAutoEquID != 0)
                    {
                        //保存过,判断资产ID,不能再变化,有变化抛出错误信息

                        if (lngAutoEquID != lngFormEquID)
                        {
                            throw new Exception("变更单已经更新具体资产的历史版本,不能改变资产");
                        }
                    }

                    #endregion

                    #region 更新

                    strSQL = @"UPDATE Equ_ChangeService Set " +
                                    " NodeModelID = " + lngNodeModelID.ToString() + "," +
                                    " ChangeTypeID = " + fv.GetFieldValue("ChangeTypeID").Value + "," +
                                    " ChangeTypeName = " + StringTool.SqlQ(fv.GetFieldValue("ChangeTypeName").Value) + "," +
                                    " EffectID = " + fv.GetFieldValue("EffectID").Value + "," +
                                    " EffectName = " + StringTool.SqlQ(fv.GetFieldValue("EffectName").Value) + "," +
                                    " InstancyID = " + fv.GetFieldValue("InstancyID").Value + "," +
                                    " InstancyName = " + StringTool.SqlQ(fv.GetFieldValue("InstancyName").Value) + "," +
                                    " LevelID = " + fv.GetFieldValue("LevelID").Value + "," +
                                    " LevelName = " + StringTool.SqlQ(fv.GetFieldValue("LevelName").Value) + "," +
                                    " Subject = " + StringTool.SqlQ(fv.GetFieldValue("Subject").Value) + "," +
                                    " ChangeTime = to_date(" + StringTool.SqlQ(Convert.ToDateTime(fv.GetFieldValue("ChangeTime").Value).ToString("yyyy-MM-dd HH:mm:ss")) + ",'yyyy-MM-dd HH24:mi:ss')," +
                                    " Content = " + StringTool.SqlQ(fv.GetFieldValue("Content").Value) + "," +
                                    " Reason = " + StringTool.SqlQ(fv.GetFieldValue("Reason").Value) + "," +
                                    " CustID = " + fv.GetFieldValue("CustID").Value + "," +
                                    " Custname = " + StringTool.SqlQ(fv.GetFieldValue("Custname").Value) + "," +
                                    " CustAddress = " + StringTool.SqlQ(fv.GetFieldValue("CustAddress").Value) + "," +
                                    " Contact = " + StringTool.SqlQ(fv.GetFieldValue("Contact").Value) + "," +
                                    " Ctel = " + StringTool.SqlQ(fv.GetFieldValue("Ctel").Value) + "," +
                                    " EquipmentID = " + fv.GetFieldValue("EquipmentID").Value + "," +
                                    " EquipmentName = " + StringTool.SqlQ(fv.GetFieldValue("EquipmentName").Value) + "," +
                                    " ChangeAnalyses = " + StringTool.SqlQ(fv.GetFieldValue("ChangeAnalyses").Value) + "," +
                                    " ChangeAnalysesResult = " + StringTool.SqlQ(fv.GetFieldValue("ChangeAnalysesResult").Value) + "," +
                                    " DealStatusID = " + fv.GetFieldValue("DealStatusID").Value.ToString() + "," +

                                   
                             " ChangeNeedPeopleID=" + fv.GetFieldValue("ChangeNeedPeopleID").Value.ToString() + "," +
                             " ChangeNeedPeople=" + StringTool.SqlQ(fv.GetFieldValue("ChangeNeedPeople").Value) + "," +
                             " Isplan=" + StringTool.SqlQ(fv.GetFieldValue("Isplan").Value) + "," +
                             " CHANGE_PLACE_ID=" + StringTool.SqlQ(fv.GetFieldValue("CHANGE_PLACE_ID").Value.ToString()) + "," +
                             " CHANGE_PLACE_NAME=" + StringTool.SqlQ(fv.GetFieldValue("CHANGE_PLACE_NAME").Value) + "," +
                             " BUS_EFFECT=" + StringTool.SqlQ(fv.GetFieldValue("BUS_EFFECT").Value) + "," +
                            " DATA_EFFECT=" + StringTool.SqlQ(fv.GetFieldValue("DATA_EFFECT").Value) + "," +
                            " PLAN_BEGIN_TIME=" + (fv.GetFieldValue("PLAN_BEGIN_TIME").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("PLAN_BEGIN_TIME").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                           " PLAN_END_TIME=" + (fv.GetFieldValue("PLAN_END_TIME").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("PLAN_END_TIME").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            " IS_BUS_EFFECT=" + fv.GetFieldValue("IS_BUS_EFFECT").Value.ToString() + "," +
                           " IS_DATA_EFFECT=" + fv.GetFieldValue("IS_DATA_EFFECT").Value.ToString() + "," +
                           " CHANGE_WINDOW_ID=" + fv.GetFieldValue("CHANGE_WINDOW_ID").Value.ToString() + "," +
                            " CHANGE_WINDOW_NAME=" + StringTool.SqlQ(fv.GetFieldValue("CHANGE_WINDOW_NAME").Value) + "," +
                           " CHANGE_WINDOW_REMARK=" + StringTool.SqlQ(fv.GetFieldValue("CHANGE_WINDOW_REMARK").Value) + "," +
                           " IS_STOP_SERVER=" + fv.GetFieldValue("IS_STOP_SERVER").Value.ToString() + "," +
                            " STOP_SERVER_REMARK=" + StringTool.SqlQ(fv.GetFieldValue("STOP_SERVER_REMARK").Value) + "," +
                              " REAL_BEGIN_TIME=" + (fv.GetFieldValue("REAL_BEGIN_TIME").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("REAL_BEGIN_TIME").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                             " REAL_END_TIME=" + (fv.GetFieldValue("REAL_END_TIME").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("REAL_END_TIME").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +

                                    " DealStatus = " + StringTool.SqlQ(fv.GetFieldValue("DealStatus").Value) + ",";
                    if (lngNodeModelID == 2)
                    {                        
                        strSQL += " IS_PLAN_CHANGE = " + fv.GetFieldValue("IS_PLAN_CHANGE").Value + ",";
                    }
                    strSQL = strSQL + @" Remark = " + StringTool.SqlQ(fv.GetFieldValue("Remark").Value) +
                                " WHERE FlowID = " + lngFlowID.ToString();

                    OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                    #endregion

                    #region 获取变更ID

                    strSQL = "SELECT ID,ChangePerson FROM Equ_ChangeService WHERE FlowID=" + lngFlowID.ToString();
                    DataTable dt = OracleDbHelper.ExecuteDataTable(trans.Connection, trans, CommandType.Text, strSQL);
                    string strChangePerson = string.Empty;
                    foreach (DataRow row in dt.Rows)
                    {
                        lngNextID = Convert.ToInt32(row["ID"].ToString());
                        strChangePerson = row["ChangePerson"].ToString();
                    }

                    #endregion

                    #region 实施人


                    if (lngBusID == 10012)//实施人
                    {
                        strChangePerson += fv.GetFieldValue("RegUserName").Value + ",";

                        strSQL = "UPDATE Equ_ChangeService SET ChangePerson=" + StringTool.SqlQ(strChangePerson) + " WHERE FlowID=" + lngFlowID.ToString();

                        OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
                    }

                    #endregion
                }

                #endregion

                #region 删除变更临时表记录

                strSQL = "Delete EQU_CHANGESERVICEDETAILS Where CHANGEID=" + lngNextID;
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                #endregion

                #region 添加变更临时表记录

                XmlDocument xmlDoc = new XmlDocument();//声明XML对象
                xmlDoc.Load(strUrl);//加载XML
                XmlNode xn = xmlDoc.SelectSingleNode("XmlDesk");//过滤节点
                XmlNodeList xnl = xn.ChildNodes;//获取字节点
                foreach (XmlNode xnf in xnl)
                {
                    XmlElement xe = (XmlElement)xnf;
                    string strEquID = EPGlobal.GetNextID("EQU_CHANGESERVICEDETAILSID").ToString();
                    strSQL = "INSERT INTO EQU_CHANGESERVICEDETAILS(DETAILSID,LISTID,LISTNAME,EQUID,EQUNAME,EQUCODE,CHANGECONTENT,CHANGESTATUS,CHANGEUSERID,CHANGEDEPTID,CHANGEID,BeginChangeTime) VALUES(" + strEquID + "," +
                               StringTool.SqlQ(xe.GetAttribute("LISTID")) + "," +
                               StringTool.SqlQ(xe.GetAttribute("LISTNAME")) + "," +
                               StringTool.SqlQ(xe.GetAttribute("EQUID")) + "," +
                               StringTool.SqlQ(xe.GetAttribute("EQUNAME")) + "," +
                               StringTool.SqlQ(xe.GetAttribute("EQUCODE")) + "," +
                               StringTool.SqlQ(xe.GetAttribute("CHANGECONTENT")) + "," +
                               StringTool.SqlQ(xe.GetAttribute("CHANGESTATUS")) + "," +
                                "0,0," +
                                lngNextID + ",sysdate)";
                    OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
                    strSQL = "UPDATE EQU_DESK SET CHANGE_ID=" + lngNextID + "  WHERE ID IN (SELECT ID FROM EQU_DESK WHERE ID=" + StringTool.SqlQ(xe.GetAttribute("EQUID")) + " AND CHANGE_ID=0)";
                    OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
                }
                #endregion

                #region  实际变更位置

                //资产变更开始
                if (lngBusID == 10000)
                {
                    DataTable dt = Equ_DeskDP.getEquChange(lngFlowID);

                    if (dt.Rows.Count > 0)
                    {

                        foreach (DataRow row in dt.Rows)
                        {

                            #region 查询出变更前的资产信息

                            Equ_DeskDP pEqu_DeskDP = new Equ_DeskDP();
                            string StrChangeBy = row["changeby"].ToString();
                            //查询出变更前的资产信息
                            pEqu_DeskDP = pEqu_DeskDP.GetReCorded(trans, long.Parse(row["ID"].ToString()));

                            #endregion

                            #region 判断在历史表中是否存在
                            //判断在历史表中是否存在
                            strSQL = "SELECT ID FROM Equ_DeskHistory WHERE FlowID = " + lngFlowID.ToString() + " and EquId=" + row["ID"].ToString();

                            dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
                            bool blnHasHistory = false;
                            if (dr.Read())
                            {
                                blnHasHistory = true;
                            }
                            dr.Close();
                            #endregion

                            #region 如不存在 则插入历史记录

                            if (blnHasHistory == false)
                            {
                                #region 插入语句

                                strSQL = @"INSERT INTO Equ_DeskHistory(
									                ID,
                                                    FlowID,
                                                    ListID,
                                                    ListName,
									                Name,
									                Code,
									                Positions,
									                SerialNumber,
                                                    Breed,
                                                    Model,
									                Provide,
									                ProvideName,
									                EquStatusID,
									                EquStatusName,
                                                    CatalogID,
									                CatalogName,
									                FullID,
									                Deleted,
                                                    UpdateUserID,
									                RegUserID,
									                RegUserName,
									                RegDeptID,
									                RegDeptName,
									                RegTime,
									                ConfigureInfo,
                                                    ConfigureValue,
									                Costom,
									                CostomName,
									                ServiceBeginTime,
									                ServiceEndTime,
                                                    Version,
                                                    VersionTime,
                                                    ConfigureSchema,
                                                    partBankId,
                                                    partBankName,
                                                    partBranchId,
                                                    partBranchName,
									                ItemCode,
                                                    EquId,
                                                    Mastcustid
					                )
					                VALUES( " +
                                   pEqu_DeskDP.ID.ToString() + "," +
                                   lngFlowID.ToString() + "," +
                                   pEqu_DeskDP.ListID + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.ListName) + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.Name) + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.Code) + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.Positions) + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.SerialNumber) + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.Breed) + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.Model) + "," +
                                   pEqu_DeskDP.Provide.ToString() + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.ProvideName) + "," +
                                   pEqu_DeskDP.EquStatusID.ToString() + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.EquStatusName) + "," +
                                   pEqu_DeskDP.CatalogID.ToString() + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.CatalogName) + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.FullID) + "," +
                                   pEqu_DeskDP.Deleted.ToString() + "," +
                                   (StrChangeBy == "" ? System.Web.HttpContext.Current.Session["UserID"].ToString() : StrChangeBy) + "," +
                                   pEqu_DeskDP.RegUserID.ToString() + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.RegUserName) + "," +
                                   pEqu_DeskDP.RegDeptID.ToString() + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.RegDeptName) + "," +
                                   (pEqu_DeskDP.RegTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.RegTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                   StringTool.SqlQ("") + "," +
                                   StringTool.SqlQ("") + "," +
                                   pEqu_DeskDP.Costom.ToString() + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.CostomName) + "," +
                                   (pEqu_DeskDP.ServiceBeginTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.ServiceBeginTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                   (pEqu_DeskDP.ServiceEndTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.ServiceEndTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                   pEqu_DeskDP.Version.ToString() + "," +
                                   "sysdate" + "," +
                                   StringTool.SqlQ("") + "," +
                                    pEqu_DeskDP.partBankId.ToString() + "," +
                                    StringTool.SqlQ(pEqu_DeskDP.partBankName.ToString()) + "," +
                                   pEqu_DeskDP.partBranchId.ToString() + "," +
                                    StringTool.SqlQ(pEqu_DeskDP.partBranchName.ToString()) + "," +
                                   StringTool.SqlQ(pEqu_DeskDP.ItemCode) + "," +
                                   pEqu_DeskDP.ID.ToString() + "," +
                                   pEqu_DeskDP.Mastcustid.ToString() +
                                 ")";

                                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                                //string c = Equ_SubjectDP.GetCatalogSchema((long)pEqu_DeskDP.CatalogID);
                                //strSQL = "UPDATE Equ_DeskHistory Set ConfigureInfo=" + StringTool.SqlQ(pEqu_DeskDP.ConfigureInfo) + ",ConfigureValue=" + StringTool.SqlQ(pEqu_DeskDP.ConfigureValue) + ",ConfigureSchema=" + StringTool.SqlQ(c) + " where FlowID=" + lngFlowID.ToString() + " AND ID=" + pEqu_DeskDP.ID.ToString();
                                //OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
                                //字符超长出错
                                strSQL = "UPDATE Equ_DeskHistory Set ConfigureInfo=:a,ConfigureValue=:b,ConfigureSchema=:c where FlowID=" + lngFlowID.ToString() + " AND ID=" + pEqu_DeskDP.ID.ToString();
                                OracleCommand cmd = new OracleCommand(strSQL, trans.Connection, trans);
                                cmd.Parameters.Add("a", OracleType.Clob).Value = pEqu_DeskDP.ConfigureInfo;
                                cmd.Parameters.Add("b", OracleType.Clob).Value = pEqu_DeskDP.ConfigureValue;
                                cmd.Parameters.Add("c", OracleType.Clob).Value = Equ_SubjectDP.GetCatalogSchema((long)pEqu_DeskDP.CatalogID);
                                cmd.ExecuteNonQuery();

                                #endregion

                                #region 保存变更临时表扩展项信息

                                //保存变更临时表扩展项信息
                                foreach (EQU_deploy deploy in pEqu_DeskDP.EquDeploy)
                                {
                                    #region 操作对象

                                    EQU_deployHistory deployHistory = new EQU_deployHistory();

                                    #endregion

                                    #region 属性项赋值

                                    deployHistory.EquID = deploy.EquID;//资产ID
                                    deployHistory.FieldID = deploy.FieldID;//配置项ID
                                    deployHistory.CHName = deploy.CHName;//配置项中文名
                                    deployHistory.Value = deploy.Value;//配置项值
                                    deployHistory.version = long.Parse(pEqu_DeskDP.Version.ToString());//版本号
                                    deployHistory.versionTime = System.DateTime.Now;
                                    #endregion

                                    #region 执行添加

                                    deployHistory.saveInsert(trans, deployHistory);//添加数据

                                    #endregion
                                }

                                #endregion
                            }

                            #endregion

                            #region  更新资产信息
                            //跟新资产
                            pEqu_DeskDP = pEqu_DeskDP.GetReCordedForChange(trans, long.Parse(row["ID"].ToString()), lngFlowID);
                            strSQL = @"UPDATE Equ_Desk Set " +
                                                   " ListID=" + pEqu_DeskDP.ListID + "," +
                                                   " ListName=" + StringTool.SqlQ(pEqu_DeskDP.ListName) + "," +
                                                   " Name = " + StringTool.SqlQ(pEqu_DeskDP.Name) + "," +
                                                   " Code = " + StringTool.SqlQ(pEqu_DeskDP.Code) + "," +
                                                   " Positions = " + StringTool.SqlQ(pEqu_DeskDP.Positions) + "," +
                                                   " SerialNumber = " + StringTool.SqlQ(pEqu_DeskDP.SerialNumber) + "," +
                                                   " Breed = " + StringTool.SqlQ(pEqu_DeskDP.Breed) + "," +
                                                   " Model = " + StringTool.SqlQ(pEqu_DeskDP.Model) + "," +
                                                   " Provide = " + pEqu_DeskDP.Provide.ToString() + "," +
                                                   " ProvideName = " + StringTool.SqlQ(pEqu_DeskDP.ProvideName) + "," +
                                                    "EquStatusID = " + pEqu_DeskDP.EquStatusID.ToString() + "," +
                                                   " EquStatusName = " + StringTool.SqlQ(pEqu_DeskDP.EquStatusName) + "," +
                                                   " CatalogID = " + pEqu_DeskDP.CatalogID.ToString() + "," +
                                                   " CatalogName = " + StringTool.SqlQ(pEqu_DeskDP.CatalogName) + "," +
                                                   " FullID = " + StringTool.SqlQ(pEqu_DeskDP.FullID) + "," +
                                                   " Deleted = " + pEqu_DeskDP.Deleted.ToString() + "," +
                                                   " RegUserID = " + pEqu_DeskDP.RegUserID.ToString() + "," +
                                                   " RegUserName = " + StringTool.SqlQ(pEqu_DeskDP.RegUserName) + "," +
                                                   " RegDeptID = " + pEqu_DeskDP.RegDeptID.ToString() + "," +
                                                   " RegDeptName = " + StringTool.SqlQ(pEqu_DeskDP.RegDeptName) + "," +
                                                   " RegTime = " + (pEqu_DeskDP.RegTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.RegTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                                   " ConfigureInfo = " + StringTool.SqlQ(pEqu_DeskDP.ConfigureInfo) + "," +
                                                   " ConfigureValue = " + StringTool.SqlQ(pEqu_DeskDP.ConfigureValue) + "," +
                                                   " Costom = " + pEqu_DeskDP.Costom.ToString() + "," +
                                                   " Version = nvl(Version,0) + 1" + "," +
                                                   " CostomName = " + StringTool.SqlQ(pEqu_DeskDP.CostomName) + "," +
                                                   " ServiceBeginTime = " + (pEqu_DeskDP.ServiceBeginTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.ServiceBeginTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                                   " ServiceEndTime = " + (pEqu_DeskDP.ServiceEndTime == DateTime.MinValue ? " null " : "to_date(" + StringTool.SqlQ(pEqu_DeskDP.ServiceEndTime.ToString()) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                                   " ItemCode = " + StringTool.SqlQ(pEqu_DeskDP.ItemCode) + "," +
                                                   " partBankId=" + pEqu_DeskDP.partBankId.ToString() + "," +
                                                   " partBankName=" + StringTool.SqlQ(pEqu_DeskDP.partBankName.ToString()) + "," +
                                                   " partBranchId=" + pEqu_DeskDP.partBranchId.ToString() + "," +
                                                   " partBranchName=" + StringTool.SqlQ(pEqu_DeskDP.partBranchName.ToString()) + "," +
                                                   " Mastcustid=" + pEqu_DeskDP.Mastcustid.ToString() + "," +
                                                   " UpdateTime = sysdate" +
                                                   " WHERE ID = " + pEqu_DeskDP.ID.ToString();

                            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                            //字符超长出错
                            strSQL = "UPDATE Equ_Desk Set ConfigureInfo=:a,ConfigureValue=:b where ID=" + pEqu_DeskDP.ID.ToString();
                            OracleCommand cmdDesk = new OracleCommand(strSQL, trans.Connection, trans);
                            cmdDesk.Parameters.Add("a", OracleType.Clob).Value = StringTool.SqlQ(pEqu_DeskDP.ConfigureInfo);
                            cmdDesk.Parameters.Add("b", OracleType.Clob).Value = StringTool.SqlQ(pEqu_DeskDP.ConfigureValue);
                            cmdDesk.ExecuteNonQuery();

                            #endregion

                            #region 保存扩展项信息

                            //扩展项对象
                            EQU_deploy ed = new EQU_deploy();

                            //保存扩展项信息
                            foreach (EQU_deploy deploy in pEqu_DeskDP.EquDeploy)
                            {
                                ed.save(trans, deploy);//保存数据
                            }

                            #endregion
                        }
                    }
                }
                #endregion

                #region  保存扩展项信息

                string ExtensionList = fv.GetFieldValue("ExtensionDayList").Value.Trim();
                string[] strArray = ExtensionList.Split('&');
                if (strArray.Length > 0)
                {
                    for (int i = 0; i < strArray.Length; i++)
                    {
                        string[] stritems = strArray[i].ToString().Split('@');
                        if (stritems.Length > 1)
                        {
                            EQU_deploy equdept = new EQU_deploy();
                            equdept.ID = long.Parse(stritems[0]);
                            equdept.EquID = lngFlowID;
                            equdept.CHName = stritems[2].ToString();
                            equdept.FieldID = long.Parse(stritems[3]);
                            equdept.Value = stritems[4].ToString();

                            equdept.save(equdept);

                        }


                    }


                }

                #endregion


            }
            catch
            {
                throw;
            }
            #endregion

            #region 删除临时XML文件

            File.Delete(strUrl);

            #endregion
        }

        #endregion

        #region 添加和发送流程后用户代码

        /// <summary>
        ///  添加和发送流程后用户代码
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="lngMessageID"></param>
        public override void SendFlowFinish(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngOpID, long lngMessageID)
        {
        }

        #endregion

        #region 删除应用相关的信息

        /// <summary>
        /// 删除应用相关的信息.
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngOpID"></param>
        public override void DeleteFieldValues(OracleTransaction trans, long lngFlowID, long lngOpID)
        {
            #region 获取变更单ID

            long lngChangeID = 0;//变更单ID

            string strSQL = "SELECT ID FROM Equ_ChangeService WHERE FlowID=" + lngFlowID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            if (dr.Read())
            {
                if (dr[0] != System.DBNull.Value)
                {
                    lngChangeID = long.Parse(dr["ID"].ToString());
                }
            }
            dr.Close();

            #endregion

            #region 更新资产状态

            if (lngChangeID != 0)
            {
                //更新原来设备的状态
                strSQL = " UPDATE equ_desk SET request = 0 WHERE  change_id=" + lngChangeID.ToString() + " AND ID in(SELECT equid FROM equ_changeservicedetails WHERE changeid = " + lngChangeID.ToString() + ")";
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                //更新变更状态
                strSQL = " UPDATE equ_changeservicedetails SET CHANGESTATUS=1,ChangeTime=sysdate WHERE changeid = " + lngChangeID.ToString();
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                //删除主表
                strSQL = "DELETE Equ_ChangeService WHERE flowid =" + lngFlowID.ToString();
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

            }

            #endregion
        }
        #endregion

        #region 统一的归档处理接口

        /// <summary>
        /// 统一的归档处理接口
        /// </summary>
        /// <param name="lngID"></param>
        public override void DoFlowEnd(OracleTransaction trans, long lngID)
        {
            #region 获取变更单ID

            long lngChangeID = 0;//变更单ID

            string strSQL = "SELECT ID FROM Equ_ChangeService WHERE FlowID=" + lngID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            if (dr.Read())
            {
                if (dr[0] != System.DBNull.Value)
                {
                    lngChangeID = long.Parse(dr["ID"].ToString());
                }
            }
            dr.Close();

            #endregion

            #region 更新资产状态

            if (lngChangeID != 0)
            {
                //更新原来设备的状态
                strSQL = " UPDATE equ_desk SET request = 0 WHERE change_id=" + lngChangeID.ToString() + " AND ID in(SELECT equid FROM equ_changeservicedetails WHERE changeid = " + lngChangeID.ToString() + ")";
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                //更新变更状态
                strSQL = " UPDATE equ_changeservicedetails SET CHANGESTATUS=1,ChangeTime=sysdate WHERE changeid = " + lngChangeID.ToString();
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
            }

            #endregion
        }
        #endregion

        #region 终止时统一归档入口
        /// <summary>
        /// 终止时统一归档入口
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngID">流程实例ID</param>
        public void DoFlowAbort(OracleTransaction trans, long lngID)
        {
            #region 获取变更单ID

            long lngChangeID = 0;//变更单ID

            string strSQL = "SELECT ID FROM Equ_ChangeService WHERE FlowID=" + lngID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            if (dr.Read())
            {
                if (dr[0] != System.DBNull.Value)
                {
                    lngChangeID = long.Parse(dr["ID"].ToString());
                }
            }
            dr.Close();

            #endregion

            #region 更新资产状态

            if (lngChangeID != 0)
            {
                //更新原来设备的状态
                strSQL = " UPDATE equ_desk SET request = 0 WHERE change_id=" + lngChangeID.ToString() + " AND ID in(SELECT equid FROM equ_changeservicedetails WHERE changeid = " + lngChangeID.ToString() + ")";
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                //更新变更状态
                strSQL = " UPDATE equ_changeservicedetails SET CHANGESTATUS=1,ChangeTime=sysdate WHERE changeid = " + lngChangeID.ToString();
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
            }

            #endregion
        }

        #endregion

        #region 新增和发送时产生MESSAGE时

        /// <summary>
        /// 新增和发送时产生MESSAGE时,用户自定义处理接口
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngMessageID"></param>
        public override void AfterMessageAddedForAddOrSend(OracleTransaction trans, long lngFlowID, long lngNodeID, long lngMessageID, int intActorType, string sFActor)
        {
        }
        #endregion

        #region 实现用户自定义二次开发

        /// <summary>
        ///  实现用户自定义二次开发,接收人员 结果
        ///  如:自动分配(根据工作量)
        ///  从表单初提取 等
        /// </summary>
        /// <param name="lngAppID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngNodeID"></param>
        /// <param name="lngMessageID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngUserID"></param>
        /// <param name="strFormXMLValue"></param>
        /// <param name="xmlDoc"></param>
        public override void UserInterfaceReceivers(long lngAppID, long lngOpID, long lngFlowID, long lngNodeID, long lngMessageID, long lngFlowModelID, long lngNodeModelID, long lngUserID, string strFormXMLValue, ref XmlDocument xmlDoc)
        {
        }

        #endregion

        #region 判断会签环节是否可以结束

        /// <summary>
        /// 判断会签环节是否可以结束
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngMessageID"></param>
        /// <returns></returns>
        public override bool IsInfluxMessageFinished(OracleTransaction trans, long lngMessageID)
        {
            return false;
        }

        #endregion
    }
}