/********************************************************
* Generated By:   suks
* 版权所有:深圳非凡信息技术有限公司
* Date Generated: 2007年7月4日
* ******************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Xml;
using System.IO;
using System.Collections;
using IappDataProcess;
using EpowerGlobal;
using EpowerCom;
using Epower.DevBase.BaseTools;
using Epower.DevBase.Organization.SqlDAL;
using Epower.ITSM.SqlDAL;

using System.Threading;
using System.Data.OracleClient;
using Epower.ITSM.SqlDAL.ES_TBLCS;
using System.Collections.Generic;
using System.Web;
using System.Text;


namespace appDataProcess.pub
{
    class App_pub_ZHService_DP : IDataProcess
    {
        public App_pub_ZHService_DP()
        { }


        /// <summary>
        /// 返回信息项结果表
        /// </summary>
        /// <param name="lngFlowID"></param>
        /// <param name="lngOpID"></param>
        /// <returns></returns>
        public override DataTable GetFieldsDataTable(long lngFlowID, long lngOpID)
        {
            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            try
            {
                strSQL = "SELECT * FROM Cst_Issues WHERE FlowID =" + lngFlowID.ToString();
                DataTable dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL);

                return dt;
            }
            finally { ConfigToolApp.CloseConnection(cn); }
        }

        /// <summary>
        /// 沟通时保存业务数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        /// <param name="lngMessageID"></param>
        public override void SaveFieldValuesForCommunic(OracleTransaction trans, long lngID, long lngNodeModelID, long lngFlowModelID, long lngOpID, string strXMlFieldValue, long lngMessageID)
        {
        }

        /// <summary>
        /// 获取业务快照数据（XML）


        /// </summary>
        /// <param name="lngFlowID"></param>
        /// <returns></returns>
        public override string GetBussinessShotValues(long lngFlowID)
        {
            string strRet = string.Empty;

            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            strSQL = "SELECT * FROM Cst_Issues WHERE FlowID =" + lngFlowID.ToString();
            DataTable dt = null;
            try { dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL); }
            finally { ConfigToolApp.CloseConnection(cn); }

            if (dt != null)
            {
                if (dt.Rows.Count > 0)
                {
                    DataRow row = dt.Rows[0];

                    FieldValues fv = new FieldValues();
                    string strTemp = "";

                    EA_DefineLanguageDP dl = new EA_DefineLanguageDP();


                    //客户名称
                    fv.Add(dl.GetLanguageValue("CST_CustName"), row["CustName"].ToString());
                    //客户地址
                    fv.Add(dl.GetLanguageValue("CST_CustAddress"), row["CustAddress"].ToString());
                    //类别
                    fv.Add(dl.GetLanguageValue("CST_ServiceType"), row["ServiceType"].ToString());
                    //资产名称
                    fv.Add(dl.GetLanguageValue("CST_EquName"), row["EquipmentName"].ToString());

                    String strContent = row["Content"].ToString();
                    if (strContent.Length > 20)
                        strContent = strContent.Substring(0, 20) + "..";

                    //描述
                    fv.Add(dl.GetLanguageValue("CST_Content"), strContent);
                    //级别
                    fv.Add(dl.GetLanguageValue("CST_ServiceLevel"), row["ServiceLevel"].ToString());
                    //状态


                    fv.Add(dl.GetLanguageValue("CST_DealStatus"), row["DealStatus"].ToString());



                    strRet = fv.GetXmlObject().InnerXml;


                }
            }

            return strRet;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="lngID"></param>
        /// <param name="lngOpID"></param>
        /// <returns></returns>
        public override string GetFieldValues(long lngID, long lngOpID)
        {
            string strRet = string.Empty;

            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();

            strSQL = "SELECT * FROM Cst_Issues WHERE FlowID =" + lngID.ToString();
            DataTable dt = null;
            try { dt = OracleDbHelper.ExecuteDataTable(cn, CommandType.Text, strSQL); }
            finally { ConfigToolApp.CloseConnection(cn); }

            if (dt != null)
            {
                if (dt.Rows.Count > 0)
                {
                    DataRow row = dt.Rows[0];

                    FieldValues fv = new FieldValues();
                    string strTemp = "";

                    if (lngOpID == 0)
                    {
                        //返回知识库


                        strTemp = row["ServiceType"].ToString() + " 总结的知识";
                        fv.Add("Title", strTemp);

                        //资产名称作为归档时的缺省关键字


                        strTemp = row["ServiceType"].ToString();
                        fv.Add("PKey", strTemp);


                        strTemp = "客户:" + row["CustName"].ToString() + " 联系人/电话:" + row["Contact"].ToString() + "  " + row["CTel"].ToString() + "<br>";
                        strTemp = strTemp + "事件描述:" + row["Content"].ToString() + "<br>";
                        strTemp = strTemp + "事件处理方法:" + row["DealContent"].ToString() + "<br>";

                        fv.Add("Content", strTemp);


                        //转问题单内容
                        fv.Add("ProblemContent", row["Content"].ToString());
                        fv.Add("DealContent", row["DealContent"].ToString());
                        fv.Add("ServiceTitle", row["Subject"].ToString());

                        #region 添加资产目录 资产名称信息 yxq 2011-09-05
                        fv.Add("EquipmentID", row["EquipmentID"].ToString()); //资产名称
                        fv.Add("EquipmentName", row["EquipmentName"].ToString());
                        fv.Add("EquipmentCatalogID", row["EquipmentCatalogID"].ToString()); //资产目录
                        fv.Add("EquipmentCatalogName", row["EquipmentCatalogName"].ToString());
                        #endregion


                        strRet = fv.GetXmlObject().InnerXml;

                    }

                }
            }

            return strRet;
        }

        /// <summary>
        /// 返回信息项结果集
        /// </summary>
        /// <param name="lngFlowID"></param>
        /// <param name="lngOpID"></param>
        /// <returns></returns>
        /// 
        public override DataSet GetFieldsDataSet(long lngFlowID, long lngOpID)
        {
            string strSQL = "";

            OracleConnection cn = ConfigToolApp.GetConnection();
            try
            {

                strSQL = "SELECT * FROM Cst_Issues WHERE FlowID =" + lngFlowID.ToString();
                DataSet ds = OracleDbHelper.ExecuteDataset(cn, CommandType.Text, strSQL);

                return ds;
            }
            finally
            {
                ConfigToolApp.CloseConnection(cn);
            }
        }

        /// <summary>
        /// 回收时应用执行的具体实现的接口


        /// 由于回收时需要删除一些内容,所以用户自定义操作会在前段执行
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngMessageID"></param>
        public override void TakeBackUserProcess(OracleTransaction trans, long lngFlowID, long lngMessageID)
        {
            string strSQL = @"select b.SjwxrID,b.Sjwxr,nvl(b.ActionID,0) ActionID,b.FlowModelID,b.NodeModelID from Cst_Issues b
				where FlowID=" + lngFlowID.ToString();
            DataSet dsNode = OracleDbHelper.ExecuteDataset(trans, CommandType.Text, strSQL);
            strSQL = string.Empty;
            string strSjwxrID = dsNode.Tables[0].Rows[0]["SjwxrID"].ToString();
            string strSjwxr = dsNode.Tables[0].Rows[0]["Sjwxr"].ToString();

            strSQL = " Select ServiceStaffID,ServiceStaffName from Cst_ServiceStaffList where NewFlag=1 and FlowID=" + lngFlowID.ToString();
            string sServiceSjwxrID = string.Empty;
            string sServiceSjwxr = string.Empty;
            DataSet dsService = OracleDbHelper.ExecuteDataset(trans, CommandType.Text, strSQL);
            foreach (DataRow dr in dsService.Tables[0].Rows)
            {
                sServiceSjwxrID = dr["ServiceStaffID"].ToString();
                sServiceSjwxr = dr["ServiceStaffName"].ToString();
                if (sServiceSjwxr != string.Empty)
                {
                    strSjwxrID = strSjwxrID.Replace("," + sServiceSjwxrID, string.Empty).Replace(sServiceSjwxrID, string.Empty);
                    strSjwxr = strSjwxr.Replace("," + sServiceSjwxr, string.Empty).Replace(sServiceSjwxr, string.Empty);
                }
            }
            strSQL = " Delete Cst_ServiceStaffList where NewFlag=1 and FlowID=" + lngFlowID.ToString();
            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
            strSQL = " Update Cst_Issues Set NodeModelID=0,SjwxrID=" + StringTool.SqlQ(strSjwxrID) + ",Sjwxr=" + StringTool.SqlQ(strSjwxr) + " where FlowID=" + lngFlowID.ToString();
            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
            //
            long lngFlowModelID = long.Parse(dsNode.Tables[0].Rows[0]["FlowModelID"].ToString());
            long lngNodeModelID = long.Parse(dsNode.Tables[0].Rows[0]["NodeModelID"].ToString());
            long lngActionID = long.Parse(dsNode.Tables[0].Rows[0]["ActionID"].ToString());
            long lngBusID = MessageDep.GetBusinessActionID(lngFlowModelID, lngNodeModelID, lngActionID);
            if (lngBusID == 10004)
            {
                strSQL = " Update Cst_Issues Set IsFirstSolve=0 where FlowID=" + lngFlowID.ToString();
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
            }
        }

        /// <summary>
        /// 退回时应用执行的具体实现的接口
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngMessageID"></param>
        public override void SendBackUserProcess(OracleTransaction trans, long lngFlowID, long lngMessageID)
        {
        }

        /// <summary>
        /// 阅知状态下保存应用中的信息值


        /// </summary>
        /// <param name="lngID"></param>
        /// <param name="lngAppID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        public override void SaveFieldValuesForRead(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngOpID, string strValues, long lngMessageID)
        {
        }

        /// <summary>
        /// 流程发送处理通知接口(在流程发送/新增处理的提交前执行)
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        /// <param name="strReceivers">接收者和消息值列字符串 格式: 接收者ID|消息ID,接收者ID|消息ID,... (仅主办的消息)</param>
        /// <param name="lngMessageID"></param>
        public override void NotifyMessage(OracleTransaction trans, long lngID, long lngNodeModelID, long lngFlowModelID, long lngOpID, string strXMlFieldValue, string strReceivers, long lngMessageID)
        {
            FieldValues fv = new FieldValues(strXMlFieldValue);

            #region 机构环节时获取接收人员列表


            if (strReceivers == "")
            {
                string strSQL = "SELECT RECEIVEID,MESSAGEID FROM ES_RECEIVELIST WHERE MessageID IN (SELECT TMessageID FROM ES_MESSAGEFROMTO WHERE FMESSAGEID=" + lngMessageID.ToString() + ")";
                DataTable dt = OracleDbHelper.ExecuteDataset(trans, CommandType.Text, strSQL).Tables[0];
                foreach (DataRow row in dt.Rows)
                {
                    strReceivers = strReceivers + row["RECEIVEID"].ToString() + "|" + row["MESSAGEID"].ToString() + ",";
                }
                if (strReceivers != "")
                    strReceivers = strReceivers.Substring(0, strReceivers.Length - 1);
            }
            #endregion            

            #region 发送邮件


            if (fv.GetFieldValue("EmailNotify") != null)
            {
                //通知处理人的情况下


                if (fv.GetFieldValue("EmailNotify").Value.Trim().ToLower() == "true")
                {
                    MailSendDeal.SendEmailPublicV2(trans, lngID, strReceivers, fv, lngFlowModelID, 0, lngMessageID);
                }
            }
            #endregion

            #region 发送短信


            //短信发送


            //if (fv.GetFieldValue("SMSNotify") != null && fv.GetFieldValue("SMSNotify").Value.Trim().ToLower() == "true")
            //{
            //    SMSSendDeal.SendMessagePublic(trans, lngID, strReceivers, fv, lngFlowModelID);
            //}
            #endregion
           
        }

        /// <summary>
        /// 保存应用中的信息值


        /// </summary>
        /// <param name="lngID"></param>
        /// <param name="lngAppID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="strXMlFieldValue"></param>
        public override void SaveFieldValues(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngActionID, long lngOpID, string strValues, long lngMessageID)
        {
            //long lngBusNodeID = MessageDep.GetBusinessNodeID(lngFlowModelID, lngNodeModelID);
            //long lngBusActionID = MessageDep.GetBusinessActionID(lngFlowModelID, lngNodeModelID,lngActionID);
            BaseSaveFieldValues(trans, lngFlowID, lngNodeModelID, lngFlowModelID, lngActionID, lngOpID, strValues, lngMessageID);
        }
        /// <summary>
        ///  添加和发送流程后用户代码
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="lngMessageID"></param>
        public override void SendFlowFinish(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngOpID, long lngMessageID)
        {
            string strSQL = string.Empty;
            string sSjwxrID = string.Empty;
            string sSjwxrName = string.Empty;
            string sSjwxrIDOld = string.Empty;
            int ActionID = 0;
            strSQL = "SELECT SjwxrID,Sjwxr FROM Cst_Issues WHERE FlowID=" + lngFlowID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            while (dr.Read())
            {
                sSjwxrID = dr["SjwxrID"].ToString();
                sSjwxrName = dr["Sjwxr"].ToString();
                break;
            }
            dr.Close();

            #region 取得旧的执行人


            //旧的执行人


            DataTable dtService = Cst_ServiceStaffDP.GetServiceStaffList(lngFlowID);
            foreach (DataRow drService in dtService.Rows)
            {
                sSjwxrIDOld += drService["ServiceStaffID"].ToString() + ",";
            }
            if (sSjwxrIDOld.EndsWith(","))
            {
                sSjwxrIDOld = sSjwxrIDOld.Remove(sSjwxrIDOld.Length - 1);
            }
            #endregion

            #region 处理机构与实际执行人
            //判断是否为机构处理业务环节


            strSQL = @"select nvl(nodebusid,0) nodebusid from Es_NodeModel
				where NodeModelID=" + lngNodeModelID.ToString() +
                " and FlowModelID=" + lngFlowModelID.ToString();
            DataSet dsNode = OracleDbHelper.ExecuteDataset(trans, CommandType.Text, strSQL);
            string strnodebusid = dsNode.Tables[0].Rows[0]["nodebusid"].ToString();
            strSQL = string.Empty;
            if (strnodebusid == "10000")  //如果为执行人环节
            {
                //strSQL = "select FMessageID,ReceiverID,ActorType,ID,Name from Es_MessageFromTo,es_message,Cst_ServiceStaff " +
                //        " where TMessageID=MessageID and ActorType=0 and Cst_ServiceStaff.deleted=0 and ReceiverID=UserID and ReceiverID<>0 and FMessageID=" + lngMessageID.ToString();

                strSQL = "select MessageID,ReceiverID,ActorType,ID,Name,ActionID FROM Es_Message,Cst_ServiceStaff " +
                        " where ActorType=0 and Cst_ServiceStaff.deleted=0 and ReceiverID=UserID and ReceiverID<>0 and MessageID=" + lngMessageID.ToString();
                DataSet ds = OracleDbHelper.ExecuteDataset(trans, CommandType.Text, strSQL);
                foreach (DataRow drmessage in ds.Tables[0].Rows)
                {
                    if (sSjwxrID.IndexOf(drmessage["ID"].ToString()) == -1)
                    {
                        if (sSjwxrName != string.Empty)
                        {
                            sSjwxrID += "," + drmessage["ID"].ToString();
                            sSjwxrName += "," + drmessage["Name"].ToString();
                            ActionID = Convert.ToInt32(drmessage["ActionID"]);
                        }
                        else
                        {
                            sSjwxrID += drmessage["ID"].ToString();
                            sSjwxrName += drmessage["Name"].ToString();
                            ActionID = Convert.ToInt32(drmessage["ActionID"]);
                        }
                    }
                }
            }
            long lngBusID = MessageDep.GetBusinessActionID(lngFlowModelID, lngNodeModelID, ActionID); //业务动作ID 对应 事件状态ID

            if (lngNodeModelID == 2)
            {
                if (lngBusID != 10002)   //首次解决
                {
                    //实际执行人


                    if (sSjwxrID.Trim().ToUpper() != sSjwxrIDOld.Trim().ToUpper())
                    {
                        strSQL = " Delete Cst_ServiceStaffList where FlowID=" + lngFlowID.ToString() + ";";
                        strSQL += " Update Cst_Issues set SjwxrID=" + StringTool.SqlQ(sSjwxrID) + ",Sjwxr=" + StringTool.SqlQ(sSjwxrName) + " where FlowID=" + lngFlowID.ToString() + ";";
                        string[] sarr = sSjwxrID.Split(',');
                        string[] sarrName = sSjwxrName.Split(',');
                        for (int i = 0; i < sarr.Length; i++)
                        {
                            string strCstID = EpowerGlobal.EPGlobal.GetNextID("Cst_ServiceStaffList_SEQUENCE").ToString();

                            if (sSjwxrIDOld.IndexOf(sarr[i]) == -1)
                            {
                                strSQL += " Insert INTO Cst_ServiceStaffList(ID,AppID,FlowID,ServiceStaffID,ServiceStaffName,NewFlag) values(" + strCstID + ",1026," +
                                    lngFlowID.ToString() + "," + sarr[i] + "," + StringTool.SqlQ(sarrName[i]) + ",1);";
                            }
                            else
                            {
                                strSQL += " Insert INTO Cst_ServiceStaffList(ID,AppID,FlowID,ServiceStaffID,ServiceStaffName,NewFlag) values(" + strCstID + ",1026," +
                                                        lngFlowID.ToString() + "," + sarr[i] + ",";

                            }
                        }
                    }
                    else
                    {
                        strSQL = " Update Cst_ServiceStaffList Set NewFlag=0 where FlowID=" + lngFlowID.ToString() + ";";

                    }
                }

            }
            else
            {
                if (sSjwxrID.Trim().ToUpper() != sSjwxrIDOld.Trim().ToUpper())
                {
                    strSQL = " Delete Cst_ServiceStaffList where FlowID=" + lngFlowID.ToString() + ";";
                    strSQL += " Update Cst_Issues set SjwxrID=" + StringTool.SqlQ(sSjwxrID) + ",Sjwxr=" + StringTool.SqlQ(sSjwxrName) + " where FlowID=" + lngFlowID.ToString() + ";";

                    string[] sarr = sSjwxrID.Split(',');
                    string[] sarrName = sSjwxrName.Split(',');
                    for (int i = 0; i < sarr.Length; i++)
                    {
                        string strCstID = EpowerGlobal.EPGlobal.GetNextID("Cst_ServiceStaffList_SEQUENCE").ToString();

                        if (sSjwxrIDOld.IndexOf(sarr[i]) == -1)
                            strSQL += " Insert into Cst_ServiceStaffList(ID,AppID,FlowID,ServiceStaffID,ServiceStaffName,NewFlag) values(" + strCstID + ",1026," +
                                lngFlowID.ToString() + "," + sarr[i] + "," + StringTool.SqlQ(sarrName[i]) + ",1);";
                        else
                            strSQL += " Insert into Cst_ServiceStaffList(ID,AppID,FlowID,ServiceStaffID,ServiceStaffName,NewFlag) values(" + strCstID + ",1026," +
                                                    lngFlowID.ToString() + "," + sarr[i] + "," + StringTool.SqlQ(sarrName[i]) + ",0);";
                    }
                }
                else
                {
                    strSQL = " Update Cst_ServiceStaffList Set NewFlag=0 where FlowID=" + lngFlowID.ToString() + ";";
                }

            }
            if (strSQL != string.Empty)
                OracleDbHelper.ExecuteNonQueryMulti(trans, CommandType.Text, strSQL);

            #endregion
        }


        /// <summary>
        /// 恢复流程执行的业务接口


        /// 2009-02-05 增加
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="flowStartTime">流程启动时间</param>
        /// <param name="flowPauseTime">流程暂停时间</param>
        /// <param name="flowContTime">流程恢复时间</param>
        /// <param name="lngUserID"></param>
        public override void DealFlowContinue(OracleTransaction trans, long lngFlowID, DateTime flowStartTime, DateTime flowPauseTime, DateTime flowContTime, long lngUserID)
        {
            //重新计算服务级别的时限



            string strSQL = "SELECT CustTime,ServiceLevelID FROM Cst_Issues WHERE flowid = " + lngFlowID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            long lngLevelID = 0;
            string sBaseTime = "";
            if (dr.Read())
            {
                if (dr.IsDBNull(0) == false)
                    sBaseTime = dr.GetDateTime(0).ToString("yyyy-MM-dd hh:mm");
                if (dr.IsDBNull(1) == false)
                    lngLevelID = (long)dr.GetDecimal(1);
            }
            dr.Close();

            if (lngLevelID != 0 && sBaseTime != "")
                FlowBusLimitDP.ReCalLevelLimitForPause(trans, lngFlowID, lngLevelID, sBaseTime, flowPauseTime, flowContTime);



        }


        /// <summary>
        /// 保存业务数据
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="strValues"></param>
        /// <param name="lngMessageID"></param>
        private void BaseSaveFieldValues(OracleTransaction trans, long lngFlowID, long lngNodeModelID, long lngFlowModelID, long lngActionID, long lngOpID, string strValues, long lngMessageID)
        {
            //判断如果为手机上操作
            FieldValues fv = new FieldValues(strValues);
            //if (fv.GetFieldValue("Flag").Value.ToLower() == "true")
            //{
            //    return;
            //}

            long lngBusID = MessageDep.GetBusinessActionID(lngFlowModelID, lngNodeModelID, lngActionID); //业务动作ID 对应 事件状态ID

            #region 保存业务数据
            long lngNextID = 0;
            decimal iTotalHours = 0;      //合计工时
            string sOuttime = fv.GetFieldValue("Outtime").Value; //派出时间
            string sFinishedTime = fv.GetFieldValue("FinishedTime").Value; //完成时间

            string sSjwxrID = fv.GetFieldValue("SjwxrID").Value;
            string sSjwxrName = fv.GetFieldValue("Sjwxr").Value;
            string sFirstSolve = "0";

            #region 根据不同业务动作绑定对应的事件状态



            string DealStatusID = fv.GetFieldValue("DealStatusID").Value;
            string DealStatus = fv.GetFieldValue("DealStatus").Value;

            string strBusName = "";

            if (lngBusID > 0)
            {
                if (lngBusID == 10004)
                    strBusName = "已解决";
                else if (lngBusID == 10002)
                    strBusName = "未响应";
                else if (lngBusID == 10003)
                    strBusName = "已关闭";
                else if (lngBusID == 18601)
                    strBusName = "处理中";
                else
                    strBusName = FlowDP.getBuidName(lngBusID);
                //根据事件状态名称 查找对应的ID
                string strCatalogID = CatalogDP.GetCatalogIDbyName(strBusName, 1017);

                DealStatusID = strCatalogID;
                DealStatus = strBusName;

            }
            #endregion

            #region 事件派单,事件关闭，首次解决


            if (lngBusID == 10002)  //如果为事件派单动作
            {
                if (sOuttime == "")
                {
                    sOuttime = DateTime.Now.ToString("yyyy-MM-dd H:mm:ss");
                }
            }
            else if (lngBusID == 10003) //如果为事件关闭动动作
            {
                if (sFinishedTime == "")
                {
                    sFinishedTime = DateTime.Now.ToString("yyyy-MM-dd H:mm:ss");
                }
            }
            else if (lngBusID == 10004) //如果为首次解决
            {
                sFirstSolve = "1";
                if (sOuttime == "")
                {
                    sOuttime = DateTime.Now.ToString("yyyy-MM-dd H:mm:ss");
                }

                if (sFinishedTime == "")
                {
                    sFinishedTime = DateTime.Now.ToString("yyyy-MM-dd H:mm:ss");
                }

            }

            if (sFinishedTime != "" && sOuttime != "")
                iTotalHours = CalcuTotalHours(sOuttime, sFinishedTime); //计算合计工时           

            #endregion


            string strSQL = "SELECT FlowID FROM Cst_Issues WHERE FlowID=" + lngFlowID.ToString();
            OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            while (dr.Read())
            {
                lngNextID = (long)dr.GetDecimal(0);
                break;
            }
            dr.Close();

            //处理机构
            string strOrgID = "0";
            try
            {
                if (lngNextID == 0)
                {
                    //设置公众请求标志，记录flowid
                    string sRequestID = fv.GetFieldValue("pubRequestID").Value;
                    if (sRequestID != "0")
                    {
                        strSQL = "UPDATE cst_request SET deallog = " + lngFlowID.ToString() +
                                     ", updateTime = sysdate ,  upuserid = " + fv.GetFieldValue("RegSysUserID").Value +
                                     " WHERE id = " + sRequestID;

                        OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
                    }

                    #region 新增
                    strSQL = @"INSERT INTO Cst_Issues(
                                    SMSID,
									FlowID,
									NodeModelID,
									FlowModelID,
                                    ServiceNo,
									Subject,
									Content,
									RegUserID,
									RegUserName,
									RegDeptID,
									RegDeptName,
									ServiceLevelID,
									ServiceLevel,
									ServiceTypeID,
									ServiceType,
									ServiceKindID,
									ServiceKind,
                                    EffectID,
									EffectName,
                                    InstancyID,
									InstancyName,
									DealStatusID,
									DealStatus,
									CustTime,
									CustID,
									CustName,
									CustAddress,
									Contact,
									CTel,
                                    CustDeptName,
                                    Job,
                                    Email,
                                    MastCust,
									EquipmentID,
									EquipmentName,
                                    EquPositions,
                                    EquCode,
                                    EquSN,
                                    EquModel,
                                    EquBreed,									
									Outtime,
									ServiceTime,
									FinishedTime,
									SjwxrID,
									Sjwxr,
									BuildCode,
									TotalHours,
									TotalAmount,
									OrgID,
									ChangeProblem,
                                    IsFirstSolve,
                                    ActionID,
									RegSysDate,
									RegSysUserID,
									RegSysUser,
                                    ReportingTime,
                                    CloseReasonID,
                                    CloseReasonName,
                                    ReSouseID,
                                    ReSouseName,
                                    EquipmentCatalogID,
                                    EquipmentCatalogName,
                                    IssTempID,
                                    IsUseIssTempID,
                                    CustAreaID,
                                    CustArea,
                                    ApplicationTime,
                                    expectedTime,
                                    reason
						)
						VALUES( " +
                            (fv.GetFieldValue("serviceid").Value == "" ? EPGlobal.GetNextID("ZHService_ID").ToString() : fv.GetFieldValue("serviceid").Value) + "," +
                            lngFlowID.ToString() + "," +
                            lngNodeModelID.ToString() + "," +
                            lngFlowModelID.ToString() + "," +
                            StringTool.SqlQ(fv.GetFieldValue("ServiceNo").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Subject").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Content").Value) + "," +
                            fv.GetFieldValue("RegUserID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("RegUserName").Value) + "," +
                            fv.GetFieldValue("RegDeptID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("RegDeptName").Value) + "," +
                            fv.GetFieldValue("ServiceLevelID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("ServiceLevel").Value) + "," +
                            fv.GetFieldValue("ServiceTypeID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("ServiceType").Value) + "," +
                            fv.GetFieldValue("ServiceKindID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("ServiceKind").Value) + "," +
                            fv.GetFieldValue("EffectID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EffectName").Value) + "," +
                            fv.GetFieldValue("InstancyID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("InstancyName").Value) + "," +
                            DealStatusID + "," +
                            StringTool.SqlQ(DealStatus) + "," +
                            (fv.GetFieldValue("CustTime").Value == "" ? " null " : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("CustTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            fv.GetFieldValue("CustID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("CustName").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("CustAddress").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Contact").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("CTel").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("CustDeptName").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Job").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Email").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("MastCust").Value) + "," +
                            fv.GetFieldValue("EquipmentID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EquipmentName").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EquPositions").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EquCode").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EquSN").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EquModel").Value) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EquBreed").Value) + "," +
                            (sOuttime == "" ? " null " : "to_date(" + StringTool.SqlQ(sOuttime) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            (fv.GetFieldValue("ServiceTime").Value == "" ? " null " : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("ServiceTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            (sFinishedTime == "" ? " null " : "to_date(" + StringTool.SqlQ(sFinishedTime) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            StringTool.SqlQ(sSjwxrID) + "," +
                            StringTool.SqlQ(sSjwxrName) + "," +
                            StringTool.SqlQ(fv.GetFieldValue("BuildCode").Value) + "," +
                            iTotalHours.ToString("F2") + "," +
                            fv.GetFieldValue("TotalAmount").Value + "," +
                            fv.GetFieldValue("OrgID").Value + "," +
                            StringTool.SqlQ(string.Empty) + "," +
                            sFirstSolve + "," +
                            lngActionID.ToString() + "," +
                            (fv.GetFieldValue("RegSysDate").Value == "" ? " null " : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("RegSysDate").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            fv.GetFieldValue("RegSysUserID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("RegSysUser").Value) + "," +
                            (fv.GetFieldValue("ReportingTime").Value == "" ? " null " : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("ReportingTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            fv.GetFieldValue("CloseReasonID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("CloseReasonName").Value) + "," +
                            fv.GetFieldValue("ReSouseID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("ReSouseName").Value) + "," +
                            fv.GetFieldValue("EquipmentCatalogID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("EquipmentCatalogName").Value) + "," +
                            fv.GetFieldValue("IssTempID").Value + "," +
                            fv.GetFieldValue("IsUseIssTempID").Value + "," +
                            fv.GetFieldValue("CustAreaID").Value + "," +
                            StringTool.SqlQ(fv.GetFieldValue("CustArea").Value) + "," +
                            (fv.GetFieldValue("ApplicationTime").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("ApplicationTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            (fv.GetFieldValue("ExpectedTime").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("ExpectedTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                            StringTool.SqlQ(fv.GetFieldValue("Reason").Value) +
                        ")";
                    #endregion
                }
                else
                {
                    #region 更新
                    strSQL = @"UPDATE Cst_Issues Set " +
                            " NodeModelID = " + lngNodeModelID.ToString() + "," +
                                    " ServiceNo = " + StringTool.SqlQ(fv.GetFieldValue("ServiceNo").Value) + "," +
                                    " Subject = " + StringTool.SqlQ(fv.GetFieldValue("Subject").Value) + "," +
                                    " Content = " + StringTool.SqlQ(fv.GetFieldValue("Content").Value) + "," +
                                    " ServiceLevelID = " + fv.GetFieldValue("ServiceLevelID").Value + "," +
                                    " ServiceLevel = " + StringTool.SqlQ(fv.GetFieldValue("ServiceLevel").Value) + "," +
                                    " ServiceTypeID = " + fv.GetFieldValue("ServiceTypeID").Value + "," +
                                    " ServiceType = " + StringTool.SqlQ(fv.GetFieldValue("ServiceType").Value) + "," +
                                    " ServiceKindID = " + fv.GetFieldValue("ServiceKindID").Value + "," +
                                    " ServiceKind = " + StringTool.SqlQ(fv.GetFieldValue("ServiceKind").Value) + "," +

                                    " EffectID = " + fv.GetFieldValue("EffectID").Value + "," +
                                    " EffectName = " + StringTool.SqlQ(fv.GetFieldValue("EffectName").Value) + "," +
                                    " InstancyID = " + fv.GetFieldValue("InstancyID").Value + "," +
                                    " InstancyName = " + StringTool.SqlQ(fv.GetFieldValue("InstancyName").Value) + "," +
                                    " DealStatusID = " + DealStatusID + "," +
                                    " DealStatus = " + StringTool.SqlQ(DealStatus) + "," +
                                    " CustTime = " + (fv.GetFieldValue("CustTime").Value == "" ? " null " : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("CustTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                    " CustID = " + fv.GetFieldValue("CustID").Value + "," +
                                    " CustName = " + StringTool.SqlQ(fv.GetFieldValue("CustName").Value) + "," +
                                    " CustAddress = " + StringTool.SqlQ(fv.GetFieldValue("CustAddress").Value) + "," +
                                    " Contact = " + StringTool.SqlQ(fv.GetFieldValue("Contact").Value) + "," +
                                    " CTel = " + StringTool.SqlQ(fv.GetFieldValue("CTel").Value) + "," +
                                    " CustDeptName = " + StringTool.SqlQ(fv.GetFieldValue("CustDeptName").Value) + "," +
                                    " Job = " + StringTool.SqlQ(fv.GetFieldValue("Job").Value) + "," +
                                    " Email = " + StringTool.SqlQ(fv.GetFieldValue("Email").Value) + "," +
                                    " MastCust = " + StringTool.SqlQ(fv.GetFieldValue("MastCust").Value) + "," +
                                    " EquipmentID = " + fv.GetFieldValue("EquipmentID").Value + "," +
                                    " EquipmentName = " + StringTool.SqlQ(fv.GetFieldValue("EquipmentName").Value) + "," +
                                    " EquPositions = " + StringTool.SqlQ(fv.GetFieldValue("EquPositions").Value) + "," +
                                    " EquCode = " + StringTool.SqlQ(fv.GetFieldValue("EquCode").Value) + "," +
                                    " EquSN = " + StringTool.SqlQ(fv.GetFieldValue("EquSN").Value) + "," +
                                    " EquModel = " + StringTool.SqlQ(fv.GetFieldValue("EquModel").Value) + "," +
                                    " EquBreed = " + StringTool.SqlQ(fv.GetFieldValue("EquBreed").Value) + "," +
                                    " Outtime = " + (sOuttime == "" ? " null " : "to_date(" + StringTool.SqlQ(sOuttime) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                    " ServiceTime = " + (fv.GetFieldValue("ServiceTime").Value == "" ? " null " : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("ServiceTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                    " FinishedTime = " + (sFinishedTime == "" ? " null " : "to_date(" + StringTool.SqlQ(sFinishedTime) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                    " SjwxrID = " + StringTool.SqlQ(sSjwxrID) + "," +
                                    " Sjwxr = " + StringTool.SqlQ(sSjwxrName) + "," +
                                    " TotalHours = " + iTotalHours.ToString("F2") + "," +
                                    " TotalAmount = " + fv.GetFieldValue("TotalAmount").Value + "," +
                                    " ReportingTime = " + (fv.GetFieldValue("ReportingTime").Value == "" ? " null " : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("ReportingTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                    " CloseReasonID = " + fv.GetFieldValue("CloseReasonID").Value + "," +
                                    " CloseReasonName = " + StringTool.SqlQ(fv.GetFieldValue("CloseReasonName").Value) + "," +
                                    " ReSouseID = " + fv.GetFieldValue("ReSouseID").Value + "," +
                                    " ReSouseName = " + StringTool.SqlQ(fv.GetFieldValue("ReSouseName").Value) + "," +
                                    " EquipmentCatalogID = " + fv.GetFieldValue("EquipmentCatalogID").Value + "," +
                                    " EquipmentCatalogName = " + StringTool.SqlQ(fv.GetFieldValue("EquipmentCatalogName").Value) + "," +
                                    " IssTempID = " + fv.GetFieldValue("IssTempID").Value + "," +
                                    " IsUseIssTempID = " + fv.GetFieldValue("IsUseIssTempID").Value + "," +
                                    " ApplicationTime=" + (fv.GetFieldValue("ApplicationTime").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("ApplicationTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                    " ExpectedTime=" + (fv.GetFieldValue("ExpectedTime").Value == "" ? " null" : "to_date(" + StringTool.SqlQ(fv.GetFieldValue("ExpectedTime").Value) + ",'yyyy-MM-dd HH24:mi:ss')") + "," +
                                    " Reason=" + StringTool.SqlQ(fv.GetFieldValue("Reason").Value) + "," +
                                    " CustAreaID = " + fv.GetFieldValue("CustAreaID").Value + "," +
                                    " CustArea = " + StringTool.SqlQ(fv.GetFieldValue("CustArea").Value);

                    strSQL += ",ActionID = " + lngActionID.ToString();
                    if (sFirstSolve != "0")
                    {
                        strSQL += ",IsFirstSolve = " + sFirstSolve;
                    }
                    strSQL += " WHERE FlowID = " + lngNextID.ToString();
                    //E8Logger.Info("更新Issues:" + strSQL);
                    #endregion
                }
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                #region 解决字符超长出错 余向前 2013-05-24
                strSQL = "update Cst_Issues set DealContent=:a where FlowID = " + lngFlowID;
                OracleCommand cmdCST = new OracleCommand(strSQL, trans.Connection, trans);
                cmdCST.Parameters.Add("a", OracleType.Clob).Value = fv.GetFieldValue("DealContent").Value;
                cmdCST.ExecuteNonQuery();
                #endregion


                if (fv.GetFieldValue("ServiceLevelChange").Value.Trim().ToLower() == "true")
                {
                    //保存服务级别对应相关时限
                    //FlowBusLimitDP.SaveLevelLimit(trans, lngFlowID, long.Parse(fv.GetFieldValue("ServiceLevelID").Value), fv.GetFieldValue("CustTime").Value);
                    FlowBusLimitDP.SaveLevelLimit(trans, lngFlowID, long.Parse(fv.GetFieldValue("ServiceLevelID").Value), fv.GetFieldValue("RegSysDate").Value);
                }



                #region 保存合并事件单


                string strLSRisk = fv.GetFieldValue("ItemXml").Value;
                int itemcount = int.Parse(fv.GetFieldValue("ItemCount").Value == "" ? "0" : fv.GetFieldValue("ItemCount").Value);

                if (strLSRisk != "")
                {
                    string strLSR = "Delete from Pro_ProblemRel where MastFlowID =" + lngFlowID.ToString();
                    OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strLSR);


                    FieldValues fvitem = new FieldValues(strLSRisk);
                    string sitsmSql = string.Empty;
                    for (int i = 0; i < itemcount; i++)
                    {
                        int icheck = int.Parse(fvitem.GetFieldValue("strChk" + i).Value);
                        if (icheck == 1)  //如果为


                            icheck = 2;

                        string strRelID = EpowerGlobal.EPGlobal.GetNextID("Pro_ProblemRel_SEQUENCE").ToString();

                        sitsmSql = @"INSERT INTO Pro_ProblemRel(
                                    ID,
                                    MastFlowID,
									SubFlowID,
									FlowDealState
						)
						VALUES(" + strRelID + "," +
                            lngFlowID.ToString() + "," +
                            fvitem.GetFieldValue("sSubFlowID" + i).Value + "," +
                            icheck.ToString() +
                        ")";

                        OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, sitsmSql);

                        sitsmSql = "select Max(MessageID) MessageID from es_message where FlowID=" + fvitem.GetFieldValue("sSubFlowID" + i).Value;

                        OracleDataReader dritsm = OracleDbHelper.ExecuteReader(trans, CommandType.Text, sitsmSql);
                        long lngitemmessageid = 0;
                        while (dritsm.Read())
                        {
                            lngitemmessageid = (long)dritsm.GetDecimal(0);
                            break;
                        }
                        dritsm.Close();
                        if (fvitem.GetFieldValue("strChk" + i).Value == "1")
                        {
                            bool breturn = FlowDP.AutoEndFlow(trans, long.Parse(fv.GetFieldValue("RegUserID").Value), lngitemmessageid, "重复事件结束");
                        }


                    }

                }
                #endregion

                #region  保存扩展项信息



                string ExtensionList = fv.GetFieldValue("ExtensionDayList").Value.Trim();
                if (!string.IsNullOrEmpty(ExtensionList))
                {
                    string[] strArray = ExtensionList.Split('&');
                    if (strArray.Length > 0)
                    {
                        for (int i = 0; i < strArray.Length; i++)
                        {
                            string[] stritems = strArray[i].ToString().Split('@');
                            if (stritems.Length > 1)
                            {
                                EQU_deploy equdept = new EQU_deploy();
                                equdept.ID = long.Parse(stritems[0]);
                                equdept.EquID = lngFlowID;
                                equdept.CHName = stritems[2].ToString();
                                equdept.FieldID = long.Parse(stritems[3]);
                                equdept.Value = stritems[4].ToString();

                                equdept.save(equdept);

                            }


                        }


                    }
                }

                #endregion

            }
            catch
            {
                throw;
            }
            #endregion

        }

        private decimal CalcuTotalHours(string dBegin, string dEnd)
        {
            DateTime db, de;
            db = DateTime.Parse(dBegin);
            de = DateTime.Parse(dEnd);

            if (db > de)
                return 0;

            System.TimeSpan ND = de - db;
            return (decimal)((ND.Days * 24 * 60 + ND.Hours * 60 + ND.Minutes) / 60.00);
        }

        /// <summary>
        /// 删除应用相关的信息.
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngOpID"></param>
        public override void DeleteFieldValues(OracleTransaction trans, long lngFlowID, long lngOpID)
        {
            //删除主表
            string strSQL = "DELETE Cst_Issues WHERE flowid =" + lngFlowID.ToString();
            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
            strSQL = " delete Cst_Cost where smsid=(select smsid from Cst_Issues where ROWNUM<=1 AND Flowid=" + lngFlowID.ToString() + ")";
            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

            //补丁 陈志文2012-09-03 删除事件对应的已发邮件


            DeleteEmail(lngFlowID.ToString());
        }

        #region 删除已发邮件
        public void DeleteEmail(string FlowID)
        {
            ZHServiceDP dp = new ZHServiceDP();
            string cstno = dp.GetCstIessNo(FlowID);//查询对应的事件


            if (cstno != "")
            {
                dp.DeleteEmail(cstno);//删除已发邮件
            }
        }
        #endregion

        /// <summary>
        /// 统一的归档处理接口


        /// </summary>
        /// <param name="lngID"></param>
        public override void DoFlowEnd(OracleTransaction trans, long lngID)
        {
            //演示环境临时添加代码【演示流程结束后发送短信进行回访】  [部署时删除]
            // SMSSendDeal.SmsNotifyIssuesSurvey(trans, lngID);
            if (CommonDP.GetConfigValue("Other", "ServiceAutoFeedBack") != null && CommonDP.GetConfigValue("Other", "ServiceAutoFeedBack") == "0")  //自动回访
            {
                string sEmail = string.Empty;
                string sCustName = string.Empty;
                string sSubject = CommonDP.GetConfigValue("Other", "ServiceAutoFeedBackTitle");
                string strSQL = "SELECT nvl(a.Email,'') Email,a.CustName,a.Subject FROM Cst_Issues a WHERE a.FlowID=" + lngID.ToString();
                OracleDataReader dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
                while (dr.Read())
                {
                    sEmail = (dr.IsDBNull(0) == false ? dr.GetString(0) : "");
                    sCustName = (dr.IsDBNull(1) == false ? dr.GetString(1) : "");
                    sSubject += (dr.IsDBNull(2) == false ? dr.GetString(2) : "");
                    break;
                }
                dr.Close();
                MailSendDeal.EmailFeedBack(trans, lngID, sEmail, sCustName, sSubject);

                if (sEmail != string.Empty)
                {
                    ZHServiceDP.UpdateEmailState(trans, lngID);
                }
            }
        }

        /// <summary>
        /// 新增和发送时产生MESSAGE时,用户自定义处理接口


        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngMessageID"></param>
        public override void AfterMessageAddedForAddOrSend(OracleTransaction trans, long lngFlowID, long lngNodeID, long lngMessageID, int intActorType, string sFActor)
        {
        }

        /// <summary>
        ///  实现用户自定义二次开发,接收人员 结果
        ///  如:自动分配(根据工作量)
        ///  从表单初提取 等


        /// </summary>
        /// <param name="lngAppID"></param>
        /// <param name="lngOpID"></param>
        /// <param name="lngFlowID"></param>
        /// <param name="lngNodeID"></param>
        /// <param name="lngMessageID"></param>
        /// <param name="lngFlowModelID"></param>
        /// <param name="lngNodeModelID"></param>
        /// <param name="lngUserID"></param>
        /// <param name="strFormXMLValue"></param>
        /// <param name="xmlDoc"></param>
        public override void UserInterfaceReceivers(long lngAppID, long lngOpID, long lngFlowID, long lngNodeID, long lngMessageID, long lngFlowModelID, long lngNodeModelID, long lngUserID, string strFormXMLValue, ref XmlDocument xmlDoc)
        {
        }


        /// <summary>
        /// 判断会签环节是否可以结束
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngMessageID"></param>
        /// <returns></returns>
        public override bool IsInfluxMessageFinished(OracleTransaction trans, long lngMessageID)
        {
            return false;
        }

        /// <summary>
        /// 用户接收事项后自定义处理
        /// </summary>
        /// <param name="trans"></param>
        /// <param name="lngMessageID"></param>
        /// <param name="lngUserID"></param>
        public override void AfterReceiveMessage(OracleTransaction trans, long lngMessageID,
            long lngUserID)
        {
            #region 定义变量

            string strSQL = string.Empty;
            string sSjwxrID = string.Empty;
            string sSjwxrName = string.Empty;
            string sSjwxrIDOld = string.Empty;
            string sDealStatusID = string.Empty;
            string sDealStatus = string.Empty;
            long lngFlowID = 0;
            DataTable dt = null;
            OracleDataReader dr = null;


            #endregion



            #region 取新执行人



            strSQL = "SELECT SjwxrID,Sjwxr,FlowId FROM Cst_Issues WHERE FlowID=(SELECT FlowID FROM ES_Message WHERE MessageID=" + lngMessageID + ")";
            dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            while (dr.Read())
            {
                sSjwxrID = dr["SjwxrID"].ToString();
                sSjwxrName = dr["Sjwxr"].ToString();
                lngFlowID = long.Parse(dr["FlowId"].ToString());
                break;
            }
            dr.Close();

            #endregion

            #region 取得旧的执行人


            //旧的执行人


            dt = Cst_ServiceStaffDP.GetServiceStaffList(lngFlowID);
            foreach (DataRow drService in dt.Rows)
            {
                sSjwxrIDOld += drService["ServiceStaffID"].ToString() + ",";
            }
            if (sSjwxrIDOld.EndsWith(","))
            {
                sSjwxrIDOld = sSjwxrIDOld.Remove(sSjwxrIDOld.Length - 1);
            }
            #endregion

            #region 获取上个环节业务环节ID

            //            strSQL = @"declare @FlowModeId decimal(18,0),@NodeModelID decimal(18,0)   
            //                            SELECT @FlowModeId = FlowModelId, @NodeModelID = NodeModelID
            //                              FROM Es_Node
            //                             where NodeId = (SELECT NodeId
            //                                               FROM ES_MESSAGE
            //                                              WHERE MessageID = (SELECT FMessageID
            //                                                                   FROM Es_MessageFromTo
            //                                                                  where TMessageID =" + lngMessageID + "))" +
            //                            @"SELECT nvl(NodeBusId,0) NodeBusId 
            //                              FROM Es_NodeModel
            //                             WHERE FlowModelID = @FlowModeId
            //                               AND NodeModelID = @NodeModelID ";
            strSQL = @"SELECT FlowModelId,NodeModelID
                              FROM Es_Node
                             where NodeId = (SELECT NodeId
                                               FROM ES_MESSAGE
                                              WHERE MessageID = (SELECT FMessageID
                                                                   FROM Es_MessageFromTo
            
                                                      where TMessageID =" + lngMessageID + "))";
            string FlowModeId = string.Empty;
            string NodeModelID = string.Empty;
            dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            while (dr.Read())
            {
                FlowModeId = dr["FlowModelId"].ToString() == "" ? "0" : dr["FlowModelId"].ToString();
                NodeModelID = dr["NodeModelID"].ToString() == "" ? "0" : dr["NodeModelID"].ToString();
                break;
            }
            dr.Close();

            strSQL = @"SELECT nvl(NodeBusId,0) NodeBusId 
                              FROM Es_NodeModel
                             WHERE FlowModelID = " + FlowModeId + @"
                               AND NodeModelID = " + NodeModelID;

            decimal nodebusid = 0;
            dr = OracleDbHelper.ExecuteReader(trans, CommandType.Text, strSQL);
            if (dr.Read())
            {
                nodebusid = (dr["NodeBusId"].ToString() != "" ? decimal.Parse(dr["NodeBusId"].ToString()) : 0);
            }
            dr.Close();

            #endregion

            #region 如果为执行人环节

            if (nodebusid == 10000)  //如果为执行人环节
            {
                strSQL = "Select ID,Name FROM Cst_ServiceStaff " +
                        " WHERE UserID=" + lngUserID.ToString() + " AND Deleted=0 ";
                DataSet ds = OracleDbHelper.ExecuteDataset(trans, CommandType.Text, strSQL);
                foreach (DataRow drmessage in ds.Tables[0].Rows)
                {
                    if (sSjwxrID.IndexOf(drmessage["ID"].ToString()) == -1)
                    {
                        if (sSjwxrName != string.Empty)
                        {
                            sSjwxrID += "," + drmessage["ID"].ToString();
                            sSjwxrName += "," + drmessage["Name"].ToString();
                        }
                        else
                        {
                            sSjwxrID += drmessage["ID"].ToString();
                            sSjwxrName += drmessage["Name"].ToString();
                        }
                    }
                }
            }

            #endregion

            #region 实际执行人



            //实际执行人


            if (sSjwxrID.Trim().ToUpper() != sSjwxrIDOld.Trim().ToUpper())
            {
                strSQL = " Delete from Cst_ServiceStaffList where FlowID=" + lngFlowID.ToString();
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
                strSQL = " Update Cst_Issues set SjwxrID=" + StringTool.SqlQ(sSjwxrID) + ",Sjwxr=" + StringTool.SqlQ(sSjwxrName) + " where FlowID=" + lngFlowID.ToString();
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

                string[] sarr = sSjwxrID.Split(',');
                string[] sarrName = sSjwxrName.Split(',');
                for (int i = 0; i < sarr.Length; i++)
                {
                    string strCstID = EpowerGlobal.EPGlobal.GetNextID("Cst_ServiceStaffList_SEQUENCE").ToString();

                    if (sSjwxrIDOld.IndexOf(sarr[i]) == -1)
                        strSQL = " Insert into Cst_ServiceStaffList(ID,AppID,FlowID,ServiceStaffID,ServiceStaffName,NewFlag) values(" + strCstID + ",1026," +
                            lngFlowID.ToString() + "," + sarr[i] + "," + StringTool.SqlQ(sarrName[i]) + ",1)";
                    else
                        strSQL = " Insert into Cst_ServiceStaffList(ID,AppID,FlowID,ServiceStaffID,ServiceStaffName,NewFlag) values(" + strCstID + ",1026," +
                                                lngFlowID.ToString() + "," + sarr[i] + "," + StringTool.SqlQ(sarrName[i]) + ",0)";
                    OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
                }
            }
            else
            {
                strSQL = " Update Cst_ServiceStaffList Set NewFlag=0 where FlowID=" + lngFlowID.ToString();
                OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);
            }

            #endregion

            #region 执行更新

            //if (strSQL != string.Empty)
            //    OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, strSQL);

            #endregion
            //String strSQLText = String.Format(@"SELECT FLOWID FROM ES_MESSAGE WHERE MESSAGEID = {0}", lngMessageID);            
            //DataTable dt = CommonDP.ExcuteSqlTable(strSQLText);
            //lngFlowID = Int32.Parse(dt.Rows[0]["FLOWID"].ToString());


            //SELECT FLOWID FROM ES_MESSAGE WHERE MESSAGEID = 12631
        }

        #region 保存业务状态



        /// <summary>
        /// 保存业务状态


        /// </summary>
        /// <param name="trans"></param>
        /// <param name="messageId">messageId</param>
        /// <param name="flowId">flowId</param>
        /// <param name="busID">busId</param>
        /// <param name="busName">busName</param>
        public static void UpdateBus(OracleTransaction trans, long messageId, long flowId, string busID, string busName)
        {
            string StrSql = @"update Es_Message set BusID=" + busID + ",BusName=" + StringTool.SqlQ(busName) + "  where MessageId =" + messageId + "   and flowId =" + flowId;
            OracleDbHelper.ExecuteNonQuery(trans, CommandType.Text, StrSql);

        }

        #endregion
    }
}